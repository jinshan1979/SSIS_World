<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="7/10/2019 9:02:53 AM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="DESKTOP-JIN1"
  DTS:CreatorName="FAREAST\v-jizh10"
  DTS:DTSID="{EC2F40E7-44D4-441C-8893-27C1781F00D1}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="14.0.3026.27"
  DTS:LocaleID="1033"
  DTS:ObjectName="CaseStudy_Load_Bank"
  DTS:PackageType="5"
  DTS:VersionBuild="24"
  DTS:VersionGUID="{89A6F204-6731-4367-8B00-CA21F5F4C3F7}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[LockBox Flat File]"
      DTS:CreationName="FLATFILE"
      DTS:Description="Flat File for Lockbox processing"
      DTS:DTSID="{1D484D72-8EDF-43AD-BDFB-579E6AEFC11A}"
      DTS:ObjectName="LockBox Flat File">
      <DTS:PropertyExpression
        DTS:Name="ConnectionString">@[User::LBCurrentFile]</DTS:PropertyExpression>
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:Format="RaggedRight"
          DTS:LocaleID="1033"
          DTS:HeaderRowDelimiter="_x000D__x000A_"
          DTS:RowDelimiter="_x000D__x000A_"
          DTS:TextQualifier="_x003C_none_x003E_"
          DTS:CodePage="1252"
          DTS:ConnectionString="C:\jinshan\SSISWork\SSIS_World\CompleteExample\lockbox\samplelockbox.txt">
          <DTS:FlatFileColumns>
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x000D__x000A_"
              DTS:MaximumWidth="80"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="line"
              DTS:DTSID="{7F70C7CB-085A-494E-99E5-1669A1DCA3AA}"
              DTS:CreationName="" />
          </DTS:FlatFileColumns>
        </DTS:ConnectionManager>
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:PackageParameters>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{C49B495D-34E3-46BA-A78A-047274C81694}"
      DTS:ObjectName="LBBaseFilePath">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">C:\jinshan\SSISWork\SSIS_World\CompleteExample\lockbox</DTS:Property>
    </DTS:PackageParameter>
  </DTS:PackageParameters>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{E4334584-8523-48A5-B994-602EA45BA4D1}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="BankBatchID">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{CF7158F8-6428-4E96-88C8-D61CB3B56717}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="BankBatchNbr">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{87782300-FCB4-4996-9903-F862B753E818}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="BatchItems">
      <DTS:VariableValue
        DTS:DataType="20">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{81846620-50AC-4A8B-A986-76E3C7EE228D}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="BatchTotal">
      <DTS:VariableValue
        DTS:DataType="5">0.</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{602E5001-CDA7-4851-ADAF-1228902C63DF}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="DepositDate">
      <DTS:VariableValue
        DTS:DataType="7">7/10/2019 3:09:04 PM</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{6119E142-DD2B-45D2-A638-BA8DD64845DC}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="FileBytes">
      <DTS:VariableValue
        DTS:DataType="20">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{329A5D17-7D2D-4988-B49F-2EA27C395CD4}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="LBCurrentFile">
      <DTS:VariableValue
        DTS:DataType="8">C:\jinshan\SSISWork\SSIS_World\CompleteExample\lockbox\samplelockbox.txt</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{DB96B167-E7F0-4BF4-94CD-3E0C4FA07574}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[User::LBErrorFilePath]+&quot;\\&quot;+ REPLACE(REPLACE(REPLACE(REPLACE( (DT_WSTR, 50)GETUTCDATE(),&quot;-&quot;,&quot;&quot; ),&quot; &quot;,&quot;&quot;),&quot;:&quot;,&quot;&quot;),&quot;.&quot;,&quot;&quot;)+ (DT_WSTR, 50)@[User::FileBytes]+&quot;.txt&quot;"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="LBErrorFile">
      <DTS:VariableValue
        DTS:DataType="8">C:\jinshan\SSISWork\SSIS_World\CompleteExample\lockbox\error\201907110947460750000000.txt</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{A5B219BD-3FF9-4F45-9BC0-3A2847965561}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Package::LBBaseFilePath]+&quot;\\error&quot;"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="LBErrorFilePath">
      <DTS:VariableValue
        DTS:DataType="8">C:\jinshan\SSISWork\SSIS_World\CompleteExample\lockbox\error</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{0A024372-4596-49FA-89BE-D8CD427D77FA}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="LBImportType">
      <DTS:VariableValue
        DTS:DataType="8">LOCKBOX</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{EF82B703-6E6D-43A0-9A5C-F39FD1B8F6A9}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[User::LBProcessedFilePath] +&quot;\\&quot;+ REPLACE(REPLACE(REPLACE(REPLACE( (DT_WSTR, 50)GETUTCDATE(),&quot;-&quot;,&quot;&quot; ),&quot; &quot;,&quot;&quot;),&quot;:&quot;,&quot;&quot;),&quot;.&quot;,&quot;&quot;)+ (DT_WSTR, 50)@[User::FileBytes]+&quot;.txt&quot;"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="LBProcessedFile">
      <DTS:VariableValue
        DTS:DataType="8">C:\jinshan\SSISWork\SSIS_World\CompleteExample\lockbox\processed\201907110947460760000000.txt</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{B16F456F-4223-467B-AD21-610464EB9674}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Package::LBBaseFilePath]+&quot;\\processed&quot;"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="LBProcessedFilePath">
      <DTS:VariableValue
        DTS:DataType="8">C:\jinshan\SSISWork\SSIS_World\CompleteExample\lockbox\processed</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\File System Task For LB Error Folder"
      DTS:CreationName="Microsoft.FileSystemTask"
      DTS:Description="Verify the LB Error Folder existing"
      DTS:DTSID="{D9942E2D-1213-4DCD-A196-30646DDF76B1}"
      DTS:ExecutableType="Microsoft.FileSystemTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="File System Task For LB Error Folder"
      DTS:TaskContact="File System Task;Microsoft Corporation; SQL Server 2017; © 2017 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <FileSystemData
          TaskOperationType="CreateDirectory"
          TaskOverwriteDestFile="True"
          TaskSourcePath="User::LBErrorFilePath"
          TaskIsSourceVariable="True"
          TaskIsDestinationVariable="True" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\File System Task For LB Processed Folder"
      DTS:CreationName="Microsoft.FileSystemTask"
      DTS:Description="Checking the processed folder for LB"
      DTS:DTSID="{E76C47D2-D7A4-40B4-878A-3F243B99ECB5}"
      DTS:ExecutableType="Microsoft.FileSystemTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="File System Task For LB Processed Folder"
      DTS:TaskContact="File System Task;Microsoft Corporation; SQL Server 2017; © 2017 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <FileSystemData
          TaskOperationType="CreateDirectory"
          TaskOverwriteDestFile="True"
          TaskSourcePath="User::LBProcessedFilePath"
          TaskIsSourceVariable="True" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Foreach LockBox Loop Container"
      DTS:CreationName="STOCK:FOREACHLOOP"
      DTS:Description="Foreach Loop Container"
      DTS:DTSID="{5896532D-26AA-41BA-A770-AD540E2425A1}"
      DTS:ExecutableType="STOCK:FOREACHLOOP"
      DTS:LocaleID="-1"
      DTS:ObjectName="Foreach LockBox Loop Container">
      <DTS:ForEachEnumerator
        DTS:CreationName="Microsoft.ForEachFileEnumerator"
        DTS:DTSID="{30EC8BE5-F0F0-4667-A250-B8ED7C890CBF}"
        DTS:ObjectName="{30EC8BE5-F0F0-4667-A250-B8ED7C890CBF}">
        <DTS:PropertyExpression
          DTS:Name="Directory">@[$Package::LBBaseFilePath]</DTS:PropertyExpression>
        <DTS:ObjectData>
          <ForEachFileEnumeratorProperties>
            <FEFEProperty
              Folder="C:\jinshan\SSISWork\SSIS_World\CompleteExample\lockbox" />
            <FEFEProperty
              FileSpec="*.txt" />
            <FEFEProperty
              FileNameRetrievalType="0" />
            <FEFEProperty
              Recurse="0" />
          </ForEachFileEnumeratorProperties>
        </DTS:ObjectData>
      </DTS:ForEachEnumerator>
      <DTS:Variables />
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load"
          DTS:CreationName="Microsoft.Pipeline"
          DTS:Description="Data Flow Task"
          DTS:DTSID="{BEA504D2-6C27-4363-8751-F1FCCC8E4343}"
          DTS:ExecutableType="Microsoft.Pipeline"
          DTS:LocaleID="-1"
          DTS:ObjectName="Data Flow LockBox Detail Data Load"
          DTS:TaskContact="Performs high-performance data extraction, transformation and loading;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
          <DTS:Variables />
          <DTS:ObjectData>
            <pipeline
              version="1">
              <components>
                <component
                  refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Character Map"
                  componentClassID="Microsoft.CharacterMap"
                  contactInfo="Character Map;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;2"
                  description="Specifies the string operations to apply."
                  name="Character Map"
                  usesDispositions="true"
                  version="2">
                  <inputs>
                    <input
                      refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Character Map.Inputs[Character Map Input]"
                      name="Character Map Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Character Map.Inputs[Character Map Input].Columns[line]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="80"
                          cachedName="line"
                          errorOrTruncationOperation="Map Column"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Flat File  LockBox Source.Outputs[Flat File Source Output].Columns[line]"
                          truncationRowDisposition="FailComponent"
                          usageType="readWrite">
                          <properties>
                            <property
                              dataType="System.UInt32"
                              name="MapFlags"
                              typeConverter="LCMappingType">512</property>
                          </properties>
                        </inputColumn>
                      </inputColumns>
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Character Map.Outputs[Character Map Output]"
                      exclusionGroup="1"
                      name="Character Map Output"
                      synchronousInputId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Character Map.Inputs[Character Map Input]">
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Character Map.Outputs[Character Map Error Output]"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="Character Map Error Output"
                      synchronousInputId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Character Map.Inputs[Character Map Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Character Map.Outputs[Character Map Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Character Map.Outputs[Character Map Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Character Map.Outputs[Character Map Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Character Map.Outputs[Character Map Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Conditional Split for Header Check and Invoice"
                  componentClassID="Microsoft.ConditionalSplit"
                  contactInfo="Conditional Split;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                  description="Routes data rows to different outputs depending on the content of the data. Use conditions (SSIS expressions) to specify which rows are routed. For example, separate records that need to be cleaned from those that are ready to be loaded or route only a subset of records."
                  name="Conditional Split for Header Check and Invoice"
                  usesDispositions="true">
                  <inputs>
                    <input
                      refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Conditional Split for Header Check and Invoice.Inputs[Conditional Split Input]"
                      description="Input to the Conditional Split Transformation"
                      name="Conditional Split Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Conditional Split for Header Check and Invoice.Inputs[Conditional Split Input].Columns[line]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="80"
                          cachedName="line"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Flat File  LockBox Source.Outputs[Flat File Source Output].Columns[line]" />
                      </inputColumns>
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Conditional Split for Header Check and Invoice.Outputs[Header]"
                      description="Output 1 of the Conditional Split Transformation"
                      errorOrTruncationOperation="Computation"
                      errorRowDisposition="FailComponent"
                      exclusionGroup="1"
                      name="Header"
                      synchronousInputId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Conditional Split for Header Check and Invoice.Inputs[Conditional Split Input]"
                      truncationRowDisposition="FailComponent">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.String"
                          description="Specifies the expression. This expression version uses lineage identifiers instead of column names."
                          name="Expression">[SUBSTRING](#{Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Flat File  LockBox Source.Outputs[Flat File Source Output].Columns[line]},1,1) == "H"</property>
                        <property
                          containsID="true"
                          dataType="System.String"
                          description="Specifies the friendly version of the expression. This expression version uses column names."
                          expressionType="Notify"
                          name="FriendlyExpression">SUBSTRING(line,1,1) == "H"</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the position of the condition in the list of conditions that the transformation evaluates. The evaluation order is from the lowest to the highest value."
                          name="EvaluationOrder">0</property>
                      </properties>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Conditional Split for Header Check and Invoice.Outputs[Check]"
                      description="Output 2 of the Conditional Split Transformation"
                      errorOrTruncationOperation="Computation"
                      errorRowDisposition="FailComponent"
                      exclusionGroup="1"
                      name="Check"
                      synchronousInputId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Conditional Split for Header Check and Invoice.Inputs[Conditional Split Input]"
                      truncationRowDisposition="FailComponent">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.String"
                          description="Specifies the expression. This expression version uses lineage identifiers instead of column names."
                          name="Expression">[SUBSTRING](#{Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Flat File  LockBox Source.Outputs[Flat File Source Output].Columns[line]},1,1) == "C"</property>
                        <property
                          containsID="true"
                          dataType="System.String"
                          description="Specifies the friendly version of the expression. This expression version uses column names."
                          expressionType="Notify"
                          name="FriendlyExpression">SUBSTRING(line,1,1) == "C"</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the position of the condition in the list of conditions that the transformation evaluates. The evaluation order is from the lowest to the highest value."
                          name="EvaluationOrder">1</property>
                      </properties>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Conditional Split for Header Check and Invoice.Outputs[Invoice]"
                      description="Output 3 of the Conditional Split Transformation"
                      errorOrTruncationOperation="Computation"
                      errorRowDisposition="FailComponent"
                      exclusionGroup="1"
                      name="Invoice"
                      synchronousInputId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Conditional Split for Header Check and Invoice.Inputs[Conditional Split Input]"
                      truncationRowDisposition="FailComponent">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.String"
                          description="Specifies the expression. This expression version uses lineage identifiers instead of column names."
                          name="Expression">[SUBSTRING](#{Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Flat File  LockBox Source.Outputs[Flat File Source Output].Columns[line]},1,1) == "I"</property>
                        <property
                          containsID="true"
                          dataType="System.String"
                          description="Specifies the friendly version of the expression. This expression version uses column names."
                          expressionType="Notify"
                          name="FriendlyExpression">SUBSTRING(line,1,1) == "I"</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the position of the condition in the list of conditions that the transformation evaluates. The evaluation order is from the lowest to the highest value."
                          name="EvaluationOrder">2</property>
                      </properties>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Conditional Split for Header Check and Invoice.Outputs[Conditional Split Default Output]"
                      description="Default Output of the Conditional Split Transformation"
                      exclusionGroup="1"
                      name="Conditional Split Default Output"
                      synchronousInputId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Conditional Split for Header Check and Invoice.Inputs[Conditional Split Input]">
                      <properties>
                        <property
                          dataType="System.Boolean"
                          name="IsDefaultOut">true</property>
                      </properties>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Conditional Split for Header Check and Invoice.Outputs[Conditional Split Error Output]"
                      description="Error Output of the Conditional Split Transformation"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="Conditional Split Error Output"
                      synchronousInputId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Conditional Split for Header Check and Invoice.Inputs[Conditional Split Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Conditional Split for Header Check and Invoice.Outputs[Conditional Split Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Conditional Split for Header Check and Invoice.Outputs[Conditional Split Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Conditional Split for Header Check and Invoice.Outputs[Conditional Split Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Conditional Split for Header Check and Invoice.Outputs[Conditional Split Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column Check"
                  componentClassID="Microsoft.DerivedColumn"
                  contactInfo="Derived Column;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                  description="Creates new column values by applying expressions to transformation input columns. Create new columns or overwrite existing ones. For example, concatenate the values from the 'first name' and 'last name' column to make a 'full name' column."
                  name="Derived Column Check"
                  usesDispositions="true">
                  <inputs>
                    <input
                      refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column Check.Inputs[Derived Column Input]"
                      description="Input to the Derived Column Transformation"
                      name="Derived Column Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column Check.Inputs[Derived Column Input].Columns[line]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="80"
                          cachedName="line"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Flat File  LockBox Source.Outputs[Flat File Source Output].Columns[line]" />
                      </inputColumns>
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column Check.Outputs[Derived Column Output]"
                      description="Default Output of the Derived Column Transformation"
                      exclusionGroup="1"
                      name="Derived Column Output"
                      synchronousInputId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column Check.Inputs[Derived Column Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column Check.Outputs[Derived Column Output].Columns[MatchingKey]"
                          dataType="wstr"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          length="50"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column Check.Outputs[Derived Column Output].Columns[MatchingKey]"
                          name="MatchingKey"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">(DT_WSTR,50)[TRIM]([SUBSTRING](#{Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Flat File  LockBox Source.Outputs[Flat File Source Output].Columns[line]},2,4))</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">(DT_WSTR,50)TRIM(SUBSTRING(line,2,4))</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column Check.Outputs[Derived Column Output].Columns[ReferenceData2]"
                          dataType="wstr"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          length="50"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column Check.Outputs[Derived Column Output].Columns[ReferenceData2]"
                          name="ReferenceData2"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">(DT_WSTR,50)[TRIM]([SUBSTRING](#{Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Flat File  LockBox Source.Outputs[Flat File Source Output].Columns[line]},2,10))</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">(DT_WSTR,50)TRIM(SUBSTRING(line,2,10))</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column Check.Outputs[Derived Column Output].Columns[PaymentAmount]"
                          dataType="cy"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column Check.Outputs[Derived Column Output].Columns[PaymentAmount]"
                          name="PaymentAmount"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">(DT_CY)((DT_NUMERIC,11,2)[SUBSTRING](#{Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Flat File  LockBox Source.Outputs[Flat File Source Output].Columns[line]},15,8) / (DT_NUMERIC,11,2)100.00)</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">(DT_CY)((DT_NUMERIC,11,2)SUBSTRING(line,15,8) / (DT_NUMERIC,11,2)100.00)</property>
                          </properties>
                        </outputColumn>
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column Check.Outputs[Derived Column Error Output]"
                      description="Error Output of the Derived Column Transformation"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="Derived Column Error Output"
                      synchronousInputId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column Check.Inputs[Derived Column Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column Check.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column Check.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column Check.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column Check.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column Header"
                  componentClassID="Microsoft.DerivedColumn"
                  contactInfo="Derived Column;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                  description="Creates new column values by applying expressions to transformation input columns. Create new columns or overwrite existing ones. For example, concatenate the values from the 'first name' and 'last name' column to make a 'full name' column."
                  name="Derived Column Header"
                  usesDispositions="true">
                  <inputs>
                    <input
                      refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column Header.Inputs[Derived Column Input]"
                      description="Input to the Derived Column Transformation"
                      name="Derived Column Input">
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column Header.Outputs[Derived Column Output]"
                      description="Default Output of the Derived Column Transformation"
                      exclusionGroup="1"
                      name="Derived Column Output"
                      synchronousInputId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column Header.Inputs[Derived Column Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column Header.Outputs[Derived Column Output].Columns[LBCurrentFile]"
                          dataType="wstr"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          length="100"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column Header.Outputs[Derived Column Output].Columns[LBCurrentFile]"
                          name="LBCurrentFile"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">(DT_WSTR,100)@[User::LBCurrentFile]</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">(DT_WSTR,100)@[User::LBCurrentFile]</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column Header.Outputs[Derived Column Output].Columns[BankBatchID]"
                          dataType="i4"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column Header.Outputs[Derived Column Output].Columns[BankBatchID]"
                          name="BankBatchID"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">(DT_I4)@[User::BankBatchID]</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">(DT_I4)@[User::BankBatchID]</property>
                          </properties>
                        </outputColumn>
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column Header.Outputs[Derived Column Error Output]"
                      description="Error Output of the Derived Column Transformation"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="Derived Column Error Output"
                      synchronousInputId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column Header.Inputs[Derived Column Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column Header.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column Header.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column Header.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column Header.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column Invoice"
                  componentClassID="Microsoft.DerivedColumn"
                  contactInfo="Derived Column;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                  description="Creates new column values by applying expressions to transformation input columns. Create new columns or overwrite existing ones. For example, concatenate the values from the 'first name' and 'last name' column to make a 'full name' column."
                  name="Derived Column Invoice"
                  usesDispositions="true">
                  <inputs>
                    <input
                      refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column Invoice.Inputs[Derived Column Input]"
                      description="Input to the Derived Column Transformation"
                      name="Derived Column Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column Invoice.Inputs[Derived Column Input].Columns[line]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="80"
                          cachedName="line"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Flat File  LockBox Source.Outputs[Flat File Source Output].Columns[line]" />
                      </inputColumns>
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column Invoice.Outputs[Derived Column Output]"
                      description="Default Output of the Derived Column Transformation"
                      exclusionGroup="1"
                      name="Derived Column Output"
                      synchronousInputId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column Invoice.Inputs[Derived Column Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column Invoice.Outputs[Derived Column Output].Columns[RawInvoiceNbr]"
                          dataType="wstr"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          length="50"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column Invoice.Outputs[Derived Column Output].Columns[RawInvoiceNbr]"
                          name="RawInvoiceNbr"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">(DT_WSTR,50)[TRIM]([SUBSTRING](#{Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Flat File  LockBox Source.Outputs[Flat File Source Output].Columns[line]},13,[LEN](#{Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Flat File  LockBox Source.Outputs[Flat File Source Output].Columns[line]}) - 13))</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">(DT_WSTR,50)TRIM(SUBSTRING(line,13,LEN(line) - 13))</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column Invoice.Outputs[Derived Column Output].Columns[MatchingKey]"
                          dataType="wstr"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          length="50"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column Invoice.Outputs[Derived Column Output].Columns[MatchingKey]"
                          name="MatchingKey"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">(DT_WSTR,50)[TRIM]([SUBSTRING](#{Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Flat File  LockBox Source.Outputs[Flat File Source Output].Columns[line]},2,4))</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">(DT_WSTR,50)TRIM(SUBSTRING(line,2,4))</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column Invoice.Outputs[Derived Column Output].Columns[ReferenceData1]"
                          dataType="wstr"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          length="50"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column Invoice.Outputs[Derived Column Output].Columns[ReferenceData1]"
                          name="ReferenceData1"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">(DT_WSTR,50)[TRIM]([SUBSTRING](#{Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Flat File  LockBox Source.Outputs[Flat File Source Output].Columns[line]},2,10))</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">(DT_WSTR,50)TRIM(SUBSTRING(line,2,10))</property>
                          </properties>
                        </outputColumn>
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column Invoice.Outputs[Derived Column Error Output]"
                      description="Error Output of the Derived Column Transformation"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="Derived Column Error Output"
                      synchronousInputId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column Invoice.Inputs[Derived Column Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column Invoice.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column Invoice.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column Invoice.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column Invoice.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column to add BankBatchID"
                  componentClassID="Microsoft.DerivedColumn"
                  contactInfo="Derived Column;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                  description="Creates new column values by applying expressions to transformation input columns. Create new columns or overwrite existing ones. For example, concatenate the values from the 'first name' and 'last name' column to make a 'full name' column."
                  name="Derived Column to add BankBatchID"
                  usesDispositions="true">
                  <inputs>
                    <input
                      refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column to add BankBatchID.Inputs[Derived Column Input]"
                      description="Input to the Derived Column Transformation"
                      name="Derived Column Input">
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column to add BankBatchID.Outputs[Derived Column Output]"
                      description="Default Output of the Derived Column Transformation"
                      exclusionGroup="1"
                      name="Derived Column Output"
                      synchronousInputId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column to add BankBatchID.Inputs[Derived Column Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column to add BankBatchID.Outputs[Derived Column Output].Columns[BankBatchID]"
                          dataType="i4"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column to add BankBatchID.Outputs[Derived Column Output].Columns[BankBatchID]"
                          name="BankBatchID"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">@[User::BankBatchID]</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">@[User::BankBatchID]</property>
                          </properties>
                        </outputColumn>
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column to add BankBatchID.Outputs[Derived Column Error Output]"
                      description="Error Output of the Derived Column Transformation"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="Derived Column Error Output"
                      synchronousInputId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column to add BankBatchID.Inputs[Derived Column Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column to add BankBatchID.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column to add BankBatchID.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column to add BankBatchID.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column to add BankBatchID.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Flat File  LockBox Source"
                  componentClassID="Microsoft.FlatFileSource"
                  contactInfo="Flat File Source;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;1"
                  description="Flat File Source"
                  localeId="1033"
                  name="Flat File  LockBox Source"
                  usesDispositions="true"
                  version="1">
                  <properties>
                    <property
                      dataType="System.Boolean"
                      description="Specifies whether zero-length columns are treated as null."
                      name="RetainNulls">false</property>
                    <property
                      dataType="System.String"
                      description="Specifies the name of an output column containing the file name. If no name is specified, no output column containing the file name will be generated."
                      name="FileNameColumnName"></property>
                  </properties>
                  <connections>
                    <connection
                      refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Flat File  LockBox Source.Connections[FlatFileConnection]"
                      connectionManagerID="Package.ConnectionManagers[LockBox Flat File]"
                      connectionManagerRefId="Package.ConnectionManagers[LockBox Flat File]"
                      name="FlatFileConnection" />
                  </connections>
                  <outputs>
                    <output
                      refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Flat File  LockBox Source.Outputs[Flat File Source Output]"
                      name="Flat File Source Output">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Flat File  LockBox Source.Outputs[Flat File Source Output].Columns[line]"
                          codePage="1252"
                          dataType="str"
                          errorOrTruncationOperation="Conversion"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Flat File  LockBox Source.Outputs[Flat File Source Output].ExternalColumns[line]"
                          length="80"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Flat File  LockBox Source.Outputs[Flat File Source Output].Columns[line]"
                          name="line"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              dataType="System.Boolean"
                              description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                              name="FastParse">false</property>
                            <property
                              dataType="System.Boolean"
                              description="Indicates whether the data is in binary format."
                              name="UseBinaryFormat">false</property>
                          </properties>
                        </outputColumn>
                      </outputColumns>
                      <externalMetadataColumns
                        isUsed="True">
                        <externalMetadataColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Flat File  LockBox Source.Outputs[Flat File Source Output].ExternalColumns[line]"
                          codePage="1252"
                          dataType="str"
                          length="80"
                          name="line" />
                      </externalMetadataColumns>
                    </output>
                    <output
                      refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Flat File  LockBox Source.Outputs[Flat File Source Error Output]"
                      isErrorOut="true"
                      name="Flat File Source Error Output">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Flat File  LockBox Source.Outputs[Flat File Source Error Output].Columns[Flat File Source Error Output Column]"
                          codePage="1252"
                          dataType="text"
                          description="Flat File Source Error Output Column"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Flat File  LockBox Source.Outputs[Flat File Source Error Output].Columns[Flat File Source Error Output Column]"
                          name="Flat File Source Error Output Column" />
                        <outputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Flat File  LockBox Source.Outputs[Flat File Source Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Flat File  LockBox Source.Outputs[Flat File Source Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Flat File  LockBox Source.Outputs[Flat File Source Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Flat File  LockBox Source.Outputs[Flat File Source Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Import Column to store file"
                  componentClassID="Microsoft.Inserter"
                  contactInfo="Import Column;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                  description="Reads data from files and adds it to columns in a data flow. For example, use an input column of file paths to import photographs from a directory."
                  name="Import Column to store file"
                  usesDispositions="true">
                  <inputs>
                    <input
                      refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Import Column to store file.Inputs[Import Column Input]"
                      name="Import Column Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Import Column to store file.Inputs[Import Column Input].Columns[LBCurrentFile]"
                          cachedDataType="wstr"
                          cachedLength="100"
                          cachedName="LBCurrentFile"
                          errorOrTruncationOperation="File Open"
                          errorRowDisposition="FailComponent"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column Header.Outputs[Derived Column Output].Columns[LBCurrentFile]">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="Specifies the ID of the output column to receive the file data."
                              name="FileDataColumnID">#{Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Import Column to store file.Outputs[Import Column Output].Columns[FileStreamToStore]}</property>
                            <property
                              dataType="System.Boolean"
                              description="TRUE if the file is expected to begin with a BOM"
                              name="ExpectBOM">false</property>
                          </properties>
                        </inputColumn>
                      </inputColumns>
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Import Column to store file.Outputs[Import Column Output]"
                      exclusionGroup="1"
                      name="Import Column Output"
                      synchronousInputId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Import Column to store file.Inputs[Import Column Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Import Column to store file.Outputs[Import Column Output].Columns[FileStreamToStore]"
                          dataType="nText"
                          errorOrTruncationOperation="File Read"
                          errorRowDisposition="FailComponent"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Import Column to store file.Outputs[Import Column Output].Columns[FileStreamToStore]"
                          name="FileStreamToStore" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Import Column to store file.Outputs[Import Column Error Output]"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="Import Column Error Output"
                      synchronousInputId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Import Column to store file.Inputs[Import Column Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Import Column to store file.Outputs[Import Column Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Import Column to store file.Outputs[Import Column Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Import Column to store file.Outputs[Import Column Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Import Column to store file.Outputs[Import Column Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Merge Join Checks and Invoices"
                  componentClassID="Microsoft.MergeJoin"
                  contactInfo="Merge Join;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;1"
                  description="Combine two sorted data flows into one using the FULL, LEFT, or INNER join. We recommend this transformation when data flows can be sorted at their sources."
                  name="Merge Join Checks and Invoices"
                  version="1">
                  <properties>
                    <property
                      dataType="System.Int32"
                      description="Specifies the type of join to perform."
                      name="JoinType"
                      typeConverter="JoinType">2</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the number of columns in the ordering key."
                      name="NumKeyColumns">1</property>
                    <property
                      dataType="System.Boolean"
                      description="Indicates whether the null values are treated as equal values."
                      name="TreatNullsAsEqual">true</property>
                    <property
                      dataType="System.Int32"
                      description="Indicates the requested maximum buffers per input before blocking."
                      name="MaxBuffersPerInput">5</property>
                  </properties>
                  <inputs>
                    <input
                      refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Merge Join Checks and Invoices.Inputs[Merge Join Left Input]"
                      hasSideEffects="true"
                      name="Merge Join Left Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Merge Join Checks and Invoices.Inputs[Merge Join Left Input].Columns[MatchingKey]"
                          cachedDataType="wstr"
                          cachedLength="50"
                          cachedName="MatchingKey"
                          cachedSortKeyPosition="1"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Sort Check.Outputs[Sort Output].Columns[MatchingKey]" />
                        <inputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Merge Join Checks and Invoices.Inputs[Merge Join Left Input].Columns[PaymentAmount]"
                          cachedDataType="cy"
                          cachedName="PaymentAmount"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Sort Check.Outputs[Sort Output].Columns[PaymentAmount]" />
                        <inputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Merge Join Checks and Invoices.Inputs[Merge Join Left Input].Columns[ReferenceData2]"
                          cachedDataType="wstr"
                          cachedLength="50"
                          cachedName="ReferenceData2"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Sort Check.Outputs[Sort Output].Columns[ReferenceData2]" />
                      </inputColumns>
                      <externalMetadataColumns />
                    </input>
                    <input
                      refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Merge Join Checks and Invoices.Inputs[Merge Join Right Input]"
                      hasSideEffects="true"
                      name="Merge Join Right Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Merge Join Checks and Invoices.Inputs[Merge Join Right Input].Columns[MatchingKey]"
                          cachedDataType="wstr"
                          cachedLength="50"
                          cachedName="MatchingKey"
                          cachedSortKeyPosition="1"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Sort Invoice.Outputs[Sort Output].Columns[MatchingKey]" />
                        <inputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Merge Join Checks and Invoices.Inputs[Merge Join Right Input].Columns[RawInvoiceNbr]"
                          cachedDataType="wstr"
                          cachedLength="50"
                          cachedName="RawInvoiceNbr"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Sort Invoice.Outputs[Sort Output].Columns[RawInvoiceNbr]" />
                        <inputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Merge Join Checks and Invoices.Inputs[Merge Join Right Input].Columns[ReferenceData1]"
                          cachedDataType="wstr"
                          cachedLength="50"
                          cachedName="ReferenceData1"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Sort Invoice.Outputs[Sort Output].Columns[ReferenceData1]" />
                      </inputColumns>
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Merge Join Checks and Invoices.Outputs[Merge Join Output]"
                      name="Merge Join Output">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Merge Join Checks and Invoices.Outputs[Merge Join Output].Columns[RawInvoiceNbr]"
                          dataType="wstr"
                          length="50"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Merge Join Checks and Invoices.Outputs[Merge Join Output].Columns[RawInvoiceNbr]"
                          name="RawInvoiceNbr">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="The input column associated with this output column"
                              name="InputColumnID">#{Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Merge Join Checks and Invoices.Inputs[Merge Join Right Input].Columns[RawInvoiceNbr]}</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Merge Join Checks and Invoices.Outputs[Merge Join Output].Columns[ReferenceData1]"
                          dataType="wstr"
                          length="50"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Merge Join Checks and Invoices.Outputs[Merge Join Output].Columns[ReferenceData1]"
                          name="ReferenceData1">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="The input column associated with this output column"
                              name="InputColumnID">#{Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Merge Join Checks and Invoices.Inputs[Merge Join Right Input].Columns[ReferenceData1]}</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Merge Join Checks and Invoices.Outputs[Merge Join Output].Columns[PaymentAmount]"
                          dataType="cy"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Merge Join Checks and Invoices.Outputs[Merge Join Output].Columns[PaymentAmount]"
                          name="PaymentAmount">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="The input column associated with this output column"
                              name="InputColumnID">#{Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Merge Join Checks and Invoices.Inputs[Merge Join Left Input].Columns[PaymentAmount]}</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Merge Join Checks and Invoices.Outputs[Merge Join Output].Columns[ReferenceData2]"
                          dataType="wstr"
                          length="50"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Merge Join Checks and Invoices.Outputs[Merge Join Output].Columns[ReferenceData2]"
                          name="ReferenceData2">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="The input column associated with this output column"
                              name="InputColumnID">#{Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Merge Join Checks and Invoices.Inputs[Merge Join Left Input].Columns[ReferenceData2]}</property>
                          </properties>
                        </outputColumn>
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\OLE DB Destination Details"
                  componentClassID="Microsoft.OLEDBDestination"
                  contactInfo="OLE DB Destination;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;4"
                  description="OLE DB Destination"
                  name="OLE DB Destination Details"
                  usesDispositions="true"
                  version="4">
                  <properties>
                    <property
                      dataType="System.Int32"
                      description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                      name="CommandTimeout">0</property>
                    <property
                      dataType="System.String"
                      description="Specifies the name of the database object used to open a rowset."
                      name="OpenRowset">[dbo].[BankBatchDetail]</property>
                    <property
                      dataType="System.String"
                      description="Specifies the variable that contains the name of the database object used to open a rowset."
                      name="OpenRowsetVariable"></property>
                    <property
                      dataType="System.String"
                      description="The SQL command to be executed."
                      name="SqlCommand"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor"></property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the column code page to use when code page information is unavailable from the data source."
                      name="DefaultCodePage">1252</property>
                    <property
                      dataType="System.Boolean"
                      description="Forces the use of the DefaultCodePage property value when describing character data."
                      name="AlwaysUseDefaultCodePage">false</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the mode used to access the database."
                      name="AccessMode"
                      typeConverter="AccessMode">3</property>
                    <property
                      dataType="System.Boolean"
                      description="Indicates whether the values supplied for identity columns will be copied to the destination. If false, values for identity columns will be auto-generated at the destination. Applies only if fast load is turned on."
                      name="FastLoadKeepIdentity">false</property>
                    <property
                      dataType="System.Boolean"
                      description="Indicates whether the columns containing null will have null inserted in the destination. If false, columns containing null will have their default values inserted at the destination. Applies only if fast load is turned on."
                      name="FastLoadKeepNulls">false</property>
                    <property
                      dataType="System.String"
                      description="Specifies options to be used with fast load.  Applies only if fast load is turned on."
                      name="FastLoadOptions">TABLOCK,CHECK_CONSTRAINTS</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies when commits are issued during data insertion.  A value of 0 specifies that one commit will be issued at the end of data insertion.  Applies only if fast load is turned on."
                      name="FastLoadMaxInsertCommitSize">2147483647</property>
                  </properties>
                  <connections>
                    <connection
                      refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\OLE DB Destination Details.Connections[OleDbConnection]"
                      connectionManagerID="{4640E420-BCC4-43C2-B694-EBB06412AE87}:external"
                      connectionManagerRefId="Project.ConnectionManagers[CaseStudyOLEDB]"
                      description="The OLE DB runtime connection used to access the database."
                      name="OleDbConnection" />
                  </connections>
                  <inputs>
                    <input
                      refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\OLE DB Destination Details.Inputs[OLE DB Destination Input]"
                      errorOrTruncationOperation="Insert"
                      errorRowDisposition="FailComponent"
                      hasSideEffects="true"
                      name="OLE DB Destination Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\OLE DB Destination Details.Inputs[OLE DB Destination Input].Columns[RawInvoiceNbr]"
                          cachedDataType="wstr"
                          cachedLength="50"
                          cachedName="RawInvoiceNbr"
                          externalMetadataColumnId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\OLE DB Destination Details.Inputs[OLE DB Destination Input].ExternalColumns[RawInvoiceNbr]"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Merge Join Checks and Invoices.Outputs[Merge Join Output].Columns[RawInvoiceNbr]" />
                        <inputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\OLE DB Destination Details.Inputs[OLE DB Destination Input].Columns[ReferenceData1]"
                          cachedDataType="wstr"
                          cachedLength="50"
                          cachedName="ReferenceData1"
                          externalMetadataColumnId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\OLE DB Destination Details.Inputs[OLE DB Destination Input].ExternalColumns[ReferenceData1]"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Merge Join Checks and Invoices.Outputs[Merge Join Output].Columns[ReferenceData1]" />
                        <inputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\OLE DB Destination Details.Inputs[OLE DB Destination Input].Columns[PaymentAmount]"
                          cachedDataType="cy"
                          cachedName="PaymentAmount"
                          externalMetadataColumnId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\OLE DB Destination Details.Inputs[OLE DB Destination Input].ExternalColumns[PaymentAmount]"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Merge Join Checks and Invoices.Outputs[Merge Join Output].Columns[PaymentAmount]" />
                        <inputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\OLE DB Destination Details.Inputs[OLE DB Destination Input].Columns[ReferenceData2]"
                          cachedDataType="wstr"
                          cachedLength="50"
                          cachedName="ReferenceData2"
                          externalMetadataColumnId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\OLE DB Destination Details.Inputs[OLE DB Destination Input].ExternalColumns[ReferenceData2]"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Merge Join Checks and Invoices.Outputs[Merge Join Output].Columns[ReferenceData2]" />
                        <inputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\OLE DB Destination Details.Inputs[OLE DB Destination Input].Columns[BankBatchID]"
                          cachedDataType="i4"
                          cachedName="BankBatchID"
                          externalMetadataColumnId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\OLE DB Destination Details.Inputs[OLE DB Destination Input].ExternalColumns[BankBatchID]"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column to add BankBatchID.Outputs[Derived Column Output].Columns[BankBatchID]" />
                      </inputColumns>
                      <externalMetadataColumns
                        isUsed="True">
                        <externalMetadataColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\OLE DB Destination Details.Inputs[OLE DB Destination Input].ExternalColumns[BankBatchDtlID]"
                          dataType="i4"
                          name="BankBatchDtlID" />
                        <externalMetadataColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\OLE DB Destination Details.Inputs[OLE DB Destination Input].ExternalColumns[BankBatchID]"
                          dataType="i4"
                          name="BankBatchID" />
                        <externalMetadataColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\OLE DB Destination Details.Inputs[OLE DB Destination Input].ExternalColumns[RawInvoiceNbr]"
                          dataType="wstr"
                          length="50"
                          name="RawInvoiceNbr" />
                        <externalMetadataColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\OLE DB Destination Details.Inputs[OLE DB Destination Input].ExternalColumns[RawAccountNbr]"
                          dataType="wstr"
                          length="50"
                          name="RawAccountNbr" />
                        <externalMetadataColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\OLE DB Destination Details.Inputs[OLE DB Destination Input].ExternalColumns[ReferenceData1]"
                          dataType="wstr"
                          length="50"
                          name="ReferenceData1" />
                        <externalMetadataColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\OLE DB Destination Details.Inputs[OLE DB Destination Input].ExternalColumns[ReferenceData2]"
                          dataType="wstr"
                          length="50"
                          name="ReferenceData2" />
                        <externalMetadataColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\OLE DB Destination Details.Inputs[OLE DB Destination Input].ExternalColumns[MatchedInvoiceID]"
                          dataType="i4"
                          name="MatchedInvoiceID" />
                        <externalMetadataColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\OLE DB Destination Details.Inputs[OLE DB Destination Input].ExternalColumns[MatchedCustomerID]"
                          dataType="i4"
                          name="MatchedCustomerID" />
                        <externalMetadataColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\OLE DB Destination Details.Inputs[OLE DB Destination Input].ExternalColumns[MatchedDate]"
                          dataType="dbTimeStamp"
                          name="MatchedDate" />
                        <externalMetadataColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\OLE DB Destination Details.Inputs[OLE DB Destination Input].ExternalColumns[PaymentAmount]"
                          dataType="cy"
                          name="PaymentAmount" />
                      </externalMetadataColumns>
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\OLE DB Destination Details.Outputs[OLE DB Destination Error Output]"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="OLE DB Destination Error Output"
                      synchronousInputId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\OLE DB Destination Details.Inputs[OLE DB Destination Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\OLE DB Destination Details.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\OLE DB Destination Details.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\OLE DB Destination Details.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\OLE DB Destination Details.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\OLE DB Store Files steam"
                  componentClassID="Microsoft.OLEDBCommand"
                  contactInfo="OLE DB Command;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;2"
                  description="Runs an SQL statement for each row in a data flow. For example, call a 'new employee setup' stored procedure for each row in the 'new employees' table. Note: running an SQL statement for each row of a large data flow may take a long time."
                  name="OLE DB Store Files steam"
                  usesDispositions="true"
                  version="2">
                  <properties>
                    <property
                      dataType="System.Int32"
                      description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                      name="CommandTimeout">0</property>
                    <property
                      dataType="System.String"
                      description="The SQL command to be executed."
                      expressionType="Notify"
                      name="SqlCommand"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor">update BankBatch set BatchFile = ? where BankBatchID = ?</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the column code page to use when code page information is unavailable from the data source."
                      name="DefaultCodePage">1252</property>
                  </properties>
                  <connections>
                    <connection
                      refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\OLE DB Store Files steam.Connections[OleDbConnection]"
                      connectionManagerID="{4640E420-BCC4-43C2-B694-EBB06412AE87}:external"
                      connectionManagerRefId="Project.ConnectionManagers[CaseStudyOLEDB]"
                      description="The OLE DB runtime connection used to access the database."
                      name="OleDbConnection" />
                  </connections>
                  <inputs>
                    <input
                      refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\OLE DB Store Files steam.Inputs[OLE DB Command Input]"
                      errorOrTruncationOperation="Command Execution"
                      errorRowDisposition="FailComponent"
                      hasSideEffects="true"
                      name="OLE DB Command Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\OLE DB Store Files steam.Inputs[OLE DB Command Input].Columns[FileStreamToStore]"
                          cachedDataType="nText"
                          cachedName="FileStreamToStore"
                          externalMetadataColumnId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\OLE DB Store Files steam.Inputs[OLE DB Command Input].ExternalColumns[Param_0]"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Import Column to store file.Outputs[Import Column Output].Columns[FileStreamToStore]" />
                        <inputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\OLE DB Store Files steam.Inputs[OLE DB Command Input].Columns[BankBatchID]"
                          cachedDataType="i4"
                          cachedName="BankBatchID"
                          externalMetadataColumnId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\OLE DB Store Files steam.Inputs[OLE DB Command Input].ExternalColumns[Param_1]"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column Header.Outputs[Derived Column Output].Columns[BankBatchID]" />
                      </inputColumns>
                      <externalMetadataColumns
                        isUsed="True">
                        <externalMetadataColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\OLE DB Store Files steam.Inputs[OLE DB Command Input].ExternalColumns[Param_0]"
                          dataType="nText"
                          name="Param_0">
                          <properties>
                            <property
                              dataType="System.Int32"
                              description="Parameter information.  Matches OLE DB's DBPARAMFLAGSENUM values."
                              name="DBParamInfoFlags">193</property>
                          </properties>
                        </externalMetadataColumn>
                        <externalMetadataColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\OLE DB Store Files steam.Inputs[OLE DB Command Input].ExternalColumns[Param_1]"
                          dataType="i4"
                          name="Param_1">
                          <properties>
                            <property
                              dataType="System.Int32"
                              description="Parameter information.  Matches OLE DB's DBPARAMFLAGSENUM values."
                              name="DBParamInfoFlags">81</property>
                          </properties>
                        </externalMetadataColumn>
                      </externalMetadataColumns>
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\OLE DB Store Files steam.Outputs[OLE DB Command Output]"
                      exclusionGroup="1"
                      name="OLE DB Command Output"
                      synchronousInputId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\OLE DB Store Files steam.Inputs[OLE DB Command Input]">
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\OLE DB Store Files steam.Outputs[OLE DB Command Error Output]"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="OLE DB Command Error Output"
                      synchronousInputId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\OLE DB Store Files steam.Inputs[OLE DB Command Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\OLE DB Store Files steam.Outputs[OLE DB Command Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\OLE DB Store Files steam.Outputs[OLE DB Command Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\OLE DB Store Files steam.Outputs[OLE DB Command Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\OLE DB Store Files steam.Outputs[OLE DB Command Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Sort Check"
                  componentClassID="Microsoft.Sort"
                  contactInfo="Sort;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;1"
                  description="Sorts input data in ascending or descending order when it cannot be sorted at its source. For example, sort sales data by 'customer id' before it is written to a flat file and delivered to another department. Note: We do not recommend this transformation for large data flows."
                  name="Sort Check"
                  version="1">
                  <properties>
                    <property
                      dataType="System.Boolean"
                      description="Indicates whether the Sort transformation removes rows with duplicate sort values."
                      name="EliminateDuplicates">false</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the maximum number of threads to use for sorting."
                      expressionType="Notify"
                      name="MaximumThreads">-1</property>
                  </properties>
                  <inputs>
                    <input
                      refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Sort Check.Inputs[Sort Input]"
                      name="Sort Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Sort Check.Inputs[Sort Input].Columns[MatchingKey]"
                          cachedDataType="wstr"
                          cachedLength="50"
                          cachedName="MatchingKey"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column Check.Outputs[Derived Column Output].Columns[MatchingKey]">
                          <properties>
                            <property
                              dataType="System.Int32"
                              description="Specifies the comparison options for character data."
                              name="NewComparisonFlags">0</property>
                            <property
                              dataType="System.Int32"
                              description="Specifies the sort order of the column."
                              name="NewSortKeyPosition">1</property>
                          </properties>
                        </inputColumn>
                        <inputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Sort Check.Inputs[Sort Input].Columns[ReferenceData2]"
                          cachedDataType="wstr"
                          cachedLength="50"
                          cachedName="ReferenceData2"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column Check.Outputs[Derived Column Output].Columns[ReferenceData2]">
                          <properties>
                            <property
                              dataType="System.Int32"
                              description="Specifies the comparison options for character data."
                              name="NewComparisonFlags">0</property>
                            <property
                              dataType="System.Int32"
                              description="Specifies the sort order of the column."
                              name="NewSortKeyPosition">0</property>
                          </properties>
                        </inputColumn>
                        <inputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Sort Check.Inputs[Sort Input].Columns[PaymentAmount]"
                          cachedDataType="cy"
                          cachedName="PaymentAmount"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column Check.Outputs[Derived Column Output].Columns[PaymentAmount]">
                          <properties>
                            <property
                              dataType="System.Int32"
                              description="Specifies the comparison options for character data."
                              name="NewComparisonFlags">0</property>
                            <property
                              dataType="System.Int32"
                              description="Specifies the sort order of the column."
                              name="NewSortKeyPosition">0</property>
                          </properties>
                        </inputColumn>
                      </inputColumns>
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Sort Check.Outputs[Sort Output]"
                      isSorted="true"
                      name="Sort Output">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Sort Check.Outputs[Sort Output].Columns[MatchingKey]"
                          dataType="wstr"
                          length="50"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Sort Check.Outputs[Sort Output].Columns[MatchingKey]"
                          name="MatchingKey"
                          sortKeyPosition="1">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="Specifies the lineage identifier of the input column that is associated with this output column."
                              name="SortColumnId">#{Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column Check.Outputs[Derived Column Output].Columns[MatchingKey]}</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Sort Check.Outputs[Sort Output].Columns[ReferenceData2]"
                          dataType="wstr"
                          length="50"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Sort Check.Outputs[Sort Output].Columns[ReferenceData2]"
                          name="ReferenceData2">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="Specifies the lineage identifier of the input column that is associated with this output column."
                              name="SortColumnId">#{Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column Check.Outputs[Derived Column Output].Columns[ReferenceData2]}</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Sort Check.Outputs[Sort Output].Columns[PaymentAmount]"
                          dataType="cy"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Sort Check.Outputs[Sort Output].Columns[PaymentAmount]"
                          name="PaymentAmount">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="Specifies the lineage identifier of the input column that is associated with this output column."
                              name="SortColumnId">#{Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column Check.Outputs[Derived Column Output].Columns[PaymentAmount]}</property>
                          </properties>
                        </outputColumn>
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Sort Invoice"
                  componentClassID="Microsoft.Sort"
                  contactInfo="Sort;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;1"
                  description="Sorts input data in ascending or descending order when it cannot be sorted at its source. For example, sort sales data by 'customer id' before it is written to a flat file and delivered to another department. Note: We do not recommend this transformation for large data flows."
                  name="Sort Invoice"
                  version="1">
                  <properties>
                    <property
                      dataType="System.Boolean"
                      description="Indicates whether the Sort transformation removes rows with duplicate sort values."
                      name="EliminateDuplicates">false</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the maximum number of threads to use for sorting."
                      expressionType="Notify"
                      name="MaximumThreads">-1</property>
                  </properties>
                  <inputs>
                    <input
                      refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Sort Invoice.Inputs[Sort Input]"
                      name="Sort Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Sort Invoice.Inputs[Sort Input].Columns[RawInvoiceNbr]"
                          cachedDataType="wstr"
                          cachedLength="50"
                          cachedName="RawInvoiceNbr"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column Invoice.Outputs[Derived Column Output].Columns[RawInvoiceNbr]">
                          <properties>
                            <property
                              dataType="System.Int32"
                              description="Specifies the comparison options for character data."
                              name="NewComparisonFlags">0</property>
                            <property
                              dataType="System.Int32"
                              description="Specifies the sort order of the column."
                              name="NewSortKeyPosition">0</property>
                          </properties>
                        </inputColumn>
                        <inputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Sort Invoice.Inputs[Sort Input].Columns[MatchingKey]"
                          cachedDataType="wstr"
                          cachedLength="50"
                          cachedName="MatchingKey"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column Invoice.Outputs[Derived Column Output].Columns[MatchingKey]">
                          <properties>
                            <property
                              dataType="System.Int32"
                              description="Specifies the comparison options for character data."
                              name="NewComparisonFlags">0</property>
                            <property
                              dataType="System.Int32"
                              description="Specifies the sort order of the column."
                              name="NewSortKeyPosition">1</property>
                          </properties>
                        </inputColumn>
                        <inputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Sort Invoice.Inputs[Sort Input].Columns[ReferenceData1]"
                          cachedDataType="wstr"
                          cachedLength="50"
                          cachedName="ReferenceData1"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column Invoice.Outputs[Derived Column Output].Columns[ReferenceData1]">
                          <properties>
                            <property
                              dataType="System.Int32"
                              description="Specifies the comparison options for character data."
                              name="NewComparisonFlags">0</property>
                            <property
                              dataType="System.Int32"
                              description="Specifies the sort order of the column."
                              name="NewSortKeyPosition">0</property>
                          </properties>
                        </inputColumn>
                      </inputColumns>
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Sort Invoice.Outputs[Sort Output]"
                      isSorted="true"
                      name="Sort Output">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Sort Invoice.Outputs[Sort Output].Columns[RawInvoiceNbr]"
                          dataType="wstr"
                          length="50"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Sort Invoice.Outputs[Sort Output].Columns[RawInvoiceNbr]"
                          name="RawInvoiceNbr">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="Specifies the lineage identifier of the input column that is associated with this output column."
                              name="SortColumnId">#{Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column Invoice.Outputs[Derived Column Output].Columns[RawInvoiceNbr]}</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Sort Invoice.Outputs[Sort Output].Columns[MatchingKey]"
                          dataType="wstr"
                          length="50"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Sort Invoice.Outputs[Sort Output].Columns[MatchingKey]"
                          name="MatchingKey"
                          sortKeyPosition="1">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="Specifies the lineage identifier of the input column that is associated with this output column."
                              name="SortColumnId">#{Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column Invoice.Outputs[Derived Column Output].Columns[MatchingKey]}</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Sort Invoice.Outputs[Sort Output].Columns[ReferenceData1]"
                          dataType="wstr"
                          length="50"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Sort Invoice.Outputs[Sort Output].Columns[ReferenceData1]"
                          name="ReferenceData1">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.Int32"
                              description="Specifies the lineage identifier of the input column that is associated with this output column."
                              name="SortColumnId">#{Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column Invoice.Outputs[Derived Column Output].Columns[ReferenceData1]}</property>
                          </properties>
                        </outputColumn>
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
              </components>
              <paths>
                <path
                  refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load.Paths[Character Map Output]"
                  endId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Conditional Split for Header Check and Invoice.Inputs[Conditional Split Input]"
                  name="Character Map Output"
                  startId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Character Map.Outputs[Character Map Output]" />
                <path
                  refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load.Paths[Check]"
                  endId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column Check.Inputs[Derived Column Input]"
                  name="Check"
                  startId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Conditional Split for Header Check and Invoice.Outputs[Check]" />
                <path
                  refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load.Paths[Derived Column Output]"
                  endId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Sort Check.Inputs[Sort Input]"
                  name="Derived Column Output"
                  startId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column Check.Outputs[Derived Column Output]" />
                <path
                  refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load.Paths[Derived Column Output1]"
                  endId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Sort Invoice.Inputs[Sort Input]"
                  name="Derived Column Output"
                  startId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column Invoice.Outputs[Derived Column Output]" />
                <path
                  refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load.Paths[Derived Column Output2]"
                  endId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\OLE DB Destination Details.Inputs[OLE DB Destination Input]"
                  name="Derived Column Output"
                  startId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column to add BankBatchID.Outputs[Derived Column Output]" />
                <path
                  refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load.Paths[Derived Column Output3]"
                  endId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Import Column to store file.Inputs[Import Column Input]"
                  name="Derived Column Output"
                  startId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column Header.Outputs[Derived Column Output]" />
                <path
                  refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load.Paths[Flat File Source Output]"
                  endId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Character Map.Inputs[Character Map Input]"
                  name="Flat File Source Output"
                  startId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Flat File  LockBox Source.Outputs[Flat File Source Output]" />
                <path
                  refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load.Paths[Header]"
                  endId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column Header.Inputs[Derived Column Input]"
                  name="Header"
                  startId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Conditional Split for Header Check and Invoice.Outputs[Header]" />
                <path
                  refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load.Paths[Import Column Output]"
                  endId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\OLE DB Store Files steam.Inputs[OLE DB Command Input]"
                  name="Import Column Output"
                  startId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Import Column to store file.Outputs[Import Column Output]" />
                <path
                  refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load.Paths[Invoice]"
                  endId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column Invoice.Inputs[Derived Column Input]"
                  name="Invoice"
                  startId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Conditional Split for Header Check and Invoice.Outputs[Invoice]" />
                <path
                  refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load.Paths[Merge Join Output]"
                  endId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column to add BankBatchID.Inputs[Derived Column Input]"
                  name="Merge Join Output"
                  startId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Merge Join Checks and Invoices.Outputs[Merge Join Output]" />
                <path
                  refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load.Paths[Sort Output]"
                  endId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Merge Join Checks and Invoices.Inputs[Merge Join Left Input]"
                  name="Sort Output"
                  startId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Sort Check.Outputs[Sort Output]" />
                <path
                  refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load.Paths[Sort Output1]"
                  endId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Merge Join Checks and Invoices.Inputs[Merge Join Right Input]"
                  name="Sort Output"
                  startId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Sort Invoice.Outputs[Sort Output]" />
              </paths>
            </pipeline>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info"
          DTS:CreationName="Microsoft.Pipeline"
          DTS:Description="Data Flow Task"
          DTS:DTSID="{F8569BCA-D755-431F-9A37-F7F6212CBCCB}"
          DTS:ExecutableType="Microsoft.Pipeline"
          DTS:LocaleID="-1"
          DTS:ObjectName="Data Flow LockBox Validation and Header Info"
          DTS:TaskContact="Performs high-performance data extraction, transformation and loading;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
          <DTS:Variables />
          <DTS:ObjectData>
            <pipeline
              version="1">
              <components>
                <component
                  refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Character Map"
                  componentClassID="Microsoft.CharacterMap"
                  contactInfo="Character Map;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;2"
                  description="Specifies the string operations to apply."
                  name="Character Map"
                  usesDispositions="true"
                  version="2">
                  <inputs>
                    <input
                      refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Character Map.Inputs[Character Map Input]"
                      name="Character Map Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Character Map.Inputs[Character Map Input].Columns[line]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="80"
                          cachedName="line"
                          errorOrTruncationOperation="Map Column"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Flat File LockBox.Outputs[Flat File Source Output].Columns[line]"
                          truncationRowDisposition="FailComponent"
                          usageType="readWrite">
                          <properties>
                            <property
                              dataType="System.UInt32"
                              name="MapFlags"
                              typeConverter="LCMappingType">512</property>
                          </properties>
                        </inputColumn>
                      </inputColumns>
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Character Map.Outputs[Character Map Output]"
                      exclusionGroup="1"
                      name="Character Map Output"
                      synchronousInputId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Character Map.Inputs[Character Map Input]">
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Character Map.Outputs[Character Map Error Output]"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="Character Map Error Output"
                      synchronousInputId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Character Map.Inputs[Character Map Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Character Map.Outputs[Character Map Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Character Map.Outputs[Character Map Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Character Map.Outputs[Character Map Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Character Map.Outputs[Character Map Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Conditional Split"
                  componentClassID="Microsoft.ConditionalSplit"
                  contactInfo="Conditional Split;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                  description="Routes data rows to different outputs depending on the content of the data. Use conditions (SSIS expressions) to specify which rows are routed. For example, separate records that need to be cleaned from those that are ready to be loaded or route only a subset of records."
                  name="Conditional Split"
                  usesDispositions="true">
                  <inputs>
                    <input
                      refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Conditional Split.Inputs[Conditional Split Input]"
                      description="Input to the Conditional Split Transformation"
                      name="Conditional Split Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Conditional Split.Inputs[Conditional Split Input].Columns[line]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="80"
                          cachedName="line"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Flat File LockBox.Outputs[Flat File Source Output].Columns[line]" />
                      </inputColumns>
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Conditional Split.Outputs[Header]"
                      description="Output 1 of the Conditional Split Transformation"
                      errorOrTruncationOperation="Computation"
                      errorRowDisposition="FailComponent"
                      exclusionGroup="1"
                      name="Header"
                      synchronousInputId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Conditional Split.Inputs[Conditional Split Input]"
                      truncationRowDisposition="FailComponent">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.String"
                          description="Specifies the expression. This expression version uses lineage identifiers instead of column names."
                          name="Expression">[SUBSTRING](#{Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Flat File LockBox.Outputs[Flat File Source Output].Columns[line]},1,1) == "H"</property>
                        <property
                          containsID="true"
                          dataType="System.String"
                          description="Specifies the friendly version of the expression. This expression version uses column names."
                          expressionType="Notify"
                          name="FriendlyExpression">SUBSTRING(line,1,1) == "H"</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the position of the condition in the list of conditions that the transformation evaluates. The evaluation order is from the lowest to the highest value."
                          name="EvaluationOrder">0</property>
                      </properties>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Conditional Split.Outputs[Check]"
                      description="Output 2 of the Conditional Split Transformation"
                      errorOrTruncationOperation="Computation"
                      errorRowDisposition="FailComponent"
                      exclusionGroup="1"
                      name="Check"
                      synchronousInputId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Conditional Split.Inputs[Conditional Split Input]"
                      truncationRowDisposition="FailComponent">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.String"
                          description="Specifies the expression. This expression version uses lineage identifiers instead of column names."
                          name="Expression">[SUBSTRING](#{Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Flat File LockBox.Outputs[Flat File Source Output].Columns[line]},1,1) == "C"</property>
                        <property
                          containsID="true"
                          dataType="System.String"
                          description="Specifies the friendly version of the expression. This expression version uses column names."
                          expressionType="Notify"
                          name="FriendlyExpression">SUBSTRING(line,1,1) == "C"</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the position of the condition in the list of conditions that the transformation evaluates. The evaluation order is from the lowest to the highest value."
                          name="EvaluationOrder">1</property>
                      </properties>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Conditional Split.Outputs[Invoice]"
                      description="Output 3 of the Conditional Split Transformation"
                      errorOrTruncationOperation="Computation"
                      errorRowDisposition="FailComponent"
                      exclusionGroup="1"
                      name="Invoice"
                      synchronousInputId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Conditional Split.Inputs[Conditional Split Input]"
                      truncationRowDisposition="FailComponent">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.String"
                          description="Specifies the expression. This expression version uses lineage identifiers instead of column names."
                          name="Expression">[SUBSTRING](#{Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Flat File LockBox.Outputs[Flat File Source Output].Columns[line]},1,1) == "I"</property>
                        <property
                          containsID="true"
                          dataType="System.String"
                          description="Specifies the friendly version of the expression. This expression version uses column names."
                          expressionType="Notify"
                          name="FriendlyExpression">SUBSTRING(line,1,1) == "I"</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the position of the condition in the list of conditions that the transformation evaluates. The evaluation order is from the lowest to the highest value."
                          name="EvaluationOrder">2</property>
                      </properties>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Conditional Split.Outputs[Conditional Split Default Output]"
                      description="Default Output of the Conditional Split Transformation"
                      exclusionGroup="1"
                      name="Conditional Split Default Output"
                      synchronousInputId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Conditional Split.Inputs[Conditional Split Input]">
                      <properties>
                        <property
                          dataType="System.Boolean"
                          name="IsDefaultOut">true</property>
                      </properties>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Conditional Split.Outputs[Conditional Split Error Output]"
                      description="Error Output of the Conditional Split Transformation"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="Conditional Split Error Output"
                      synchronousInputId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Conditional Split.Inputs[Conditional Split Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Conditional Split.Outputs[Conditional Split Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Conditional Split.Outputs[Conditional Split Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Conditional Split.Outputs[Conditional Split Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Conditional Split.Outputs[Conditional Split Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Derived Column System Variables"
                  componentClassID="Microsoft.DerivedColumn"
                  contactInfo="Derived Column;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                  description="Creates new column values by applying expressions to transformation input columns. Create new columns or overwrite existing ones. For example, concatenate the values from the 'first name' and 'last name' column to make a 'full name' column."
                  name="Derived Column System Variables"
                  usesDispositions="true">
                  <inputs>
                    <input
                      refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Derived Column System Variables.Inputs[Derived Column Input]"
                      description="Input to the Derived Column Transformation"
                      name="Derived Column Input">
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Derived Column System Variables.Outputs[Derived Column Output]"
                      description="Default Output of the Derived Column Transformation"
                      exclusionGroup="1"
                      name="Derived Column Output"
                      synchronousInputId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Derived Column System Variables.Inputs[Derived Column Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Derived Column System Variables.Outputs[Derived Column Output].Columns[ErrorExecutionID]"
                          dataType="wstr"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          length="38"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Derived Column System Variables.Outputs[Derived Column Output].Columns[ErrorExecutionID]"
                          name="ErrorExecutionID"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">@[System::ExecutionInstanceGUID]</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">@[System::ExecutionInstanceGUID]</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Derived Column System Variables.Outputs[Derived Column Output].Columns[ErrorEvent]"
                          dataType="wstr"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          length="16"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Derived Column System Variables.Outputs[Derived Column Output].Columns[ErrorEvent]"
                          name="ErrorEvent"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">"Validate LockBox"</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">"Validate LockBox"</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Derived Column System Variables.Outputs[Derived Column Output].Columns[ErrorDate]"
                          dataType="dbTimeStamp"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Derived Column System Variables.Outputs[Derived Column Output].Columns[ErrorDate]"
                          name="ErrorDate"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">[GETUTCDATE]()</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">GETUTCDATE()</property>
                          </properties>
                        </outputColumn>
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Derived Column System Variables.Outputs[Derived Column Error Output]"
                      description="Error Output of the Derived Column Transformation"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="Derived Column Error Output"
                      synchronousInputId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Derived Column System Variables.Inputs[Derived Column Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Derived Column System Variables.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Derived Column System Variables.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Derived Column System Variables.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Derived Column System Variables.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Derived Columns from Header"
                  componentClassID="Microsoft.DerivedColumn"
                  contactInfo="Derived Column;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                  description="Creates new column values by applying expressions to transformation input columns. Create new columns or overwrite existing ones. For example, concatenate the values from the 'first name' and 'last name' column to make a 'full name' column."
                  name="Derived Columns from Header"
                  usesDispositions="true">
                  <inputs>
                    <input
                      refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Derived Columns from Header.Inputs[Derived Column Input]"
                      description="Input to the Derived Column Transformation"
                      name="Derived Column Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Derived Columns from Header.Inputs[Derived Column Input].Columns[line]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="80"
                          cachedName="line"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Flat File LockBox.Outputs[Flat File Source Output].Columns[line]" />
                      </inputColumns>
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Derived Columns from Header.Outputs[Derived Column Output]"
                      description="Default Output of the Derived Column Transformation"
                      exclusionGroup="1"
                      name="Derived Column Output"
                      synchronousInputId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Derived Columns from Header.Inputs[Derived Column Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Derived Columns from Header.Outputs[Derived Column Output].Columns[BatchNbr]"
                          dataType="wstr"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="RedirectRow"
                          length="12"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Derived Columns from Header.Outputs[Derived Column Output].Columns[BatchNbr]"
                          name="BatchNbr"
                          truncationRowDisposition="RedirectRow">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">(DT_WSTR,12)[UPPER]([SUBSTRING](#{Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Flat File LockBox.Outputs[Flat File Source Output].Columns[line]},9,12))</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">(DT_WSTR,12)UPPER(SUBSTRING(line,9,12))</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Derived Columns from Header.Outputs[Derived Column Output].Columns[BatchTotal]"
                          dataType="cy"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="RedirectRow"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Derived Columns from Header.Outputs[Derived Column Output].Columns[BatchTotal]"
                          name="BatchTotal"
                          truncationRowDisposition="RedirectRow">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">(DT_CY)[SUBSTRING](#{Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Flat File LockBox.Outputs[Flat File Source Output].Columns[line]},22,10)</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">(DT_CY)SUBSTRING(line,22,10)</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Derived Columns from Header.Outputs[Derived Column Output].Columns[ImportType]"
                          codePage="1252"
                          dataType="str"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="RedirectRow"
                          length="10"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Derived Columns from Header.Outputs[Derived Column Output].Columns[ImportType]"
                          name="ImportType"
                          truncationRowDisposition="RedirectRow">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">(DT_STR,10,1252)[UPPER](@[User::LBImportType])</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">(DT_STR,10,1252)UPPER(@[User::LBImportType])</property>
                          </properties>
                        </outputColumn>
                        <outputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Derived Columns from Header.Outputs[Derived Column Output].Columns[DepositeDate]"
                          dataType="date"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="RedirectRow"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Derived Columns from Header.Outputs[Derived Column Output].Columns[DepositeDate]"
                          name="DepositeDate"
                          truncationRowDisposition="RedirectRow">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">(DT_DATE)([SUBSTRING](#{Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Flat File LockBox.Outputs[Flat File Source Output].Columns[line]},2,2) + "/" + [SUBSTRING](#{Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Flat File LockBox.Outputs[Flat File Source Output].Columns[line]},4,2) + "/" + [SUBSTRING](#{Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Flat File LockBox.Outputs[Flat File Source Output].Columns[line]},6,2))</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">(DT_DATE)(SUBSTRING(line,2,2) + "/" + SUBSTRING(line,4,2) + "/" + SUBSTRING(line,6,2))</property>
                          </properties>
                        </outputColumn>
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Derived Columns from Header.Outputs[Derived Column Error Output]"
                      description="Error Output of the Derived Column Transformation"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="Derived Column Error Output"
                      synchronousInputId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Derived Columns from Header.Inputs[Derived Column Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Derived Columns from Header.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Derived Columns from Header.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Derived Columns from Header.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Derived Columns from Header.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Flat File LockBox"
                  componentClassID="Microsoft.FlatFileSource"
                  contactInfo="Flat File Source;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;1"
                  description="Flat File Source"
                  localeId="1033"
                  name="Flat File LockBox"
                  usesDispositions="true"
                  version="1">
                  <properties>
                    <property
                      dataType="System.Boolean"
                      description="Specifies whether zero-length columns are treated as null."
                      name="RetainNulls">false</property>
                    <property
                      dataType="System.String"
                      description="Specifies the name of an output column containing the file name. If no name is specified, no output column containing the file name will be generated."
                      name="FileNameColumnName"></property>
                  </properties>
                  <connections>
                    <connection
                      refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Flat File LockBox.Connections[FlatFileConnection]"
                      connectionManagerID="Package.ConnectionManagers[LockBox Flat File]"
                      connectionManagerRefId="Package.ConnectionManagers[LockBox Flat File]"
                      name="FlatFileConnection" />
                  </connections>
                  <outputs>
                    <output
                      refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Flat File LockBox.Outputs[Flat File Source Output]"
                      name="Flat File Source Output">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Flat File LockBox.Outputs[Flat File Source Output].Columns[line]"
                          codePage="1252"
                          dataType="str"
                          errorOrTruncationOperation="Conversion"
                          errorRowDisposition="FailComponent"
                          externalMetadataColumnId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Flat File LockBox.Outputs[Flat File Source Output].ExternalColumns[line]"
                          length="80"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Flat File LockBox.Outputs[Flat File Source Output].Columns[line]"
                          name="line"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              dataType="System.Boolean"
                              description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                              name="FastParse">false</property>
                            <property
                              dataType="System.Boolean"
                              description="Indicates whether the data is in binary format."
                              name="UseBinaryFormat">false</property>
                          </properties>
                        </outputColumn>
                      </outputColumns>
                      <externalMetadataColumns
                        isUsed="True">
                        <externalMetadataColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Flat File LockBox.Outputs[Flat File Source Output].ExternalColumns[line]"
                          codePage="1252"
                          dataType="str"
                          length="80"
                          name="line" />
                      </externalMetadataColumns>
                    </output>
                    <output
                      refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Flat File LockBox.Outputs[Flat File Source Error Output]"
                      isErrorOut="true"
                      name="Flat File Source Error Output">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Flat File LockBox.Outputs[Flat File Source Error Output].Columns[Flat File Source Error Output Column]"
                          codePage="1252"
                          dataType="text"
                          description="Flat File Source Error Output Column"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Flat File LockBox.Outputs[Flat File Source Error Output].Columns[Flat File Source Error Output Column]"
                          name="Flat File Source Error Output Column" />
                        <outputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Flat File LockBox.Outputs[Flat File Source Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Flat File LockBox.Outputs[Flat File Source Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Flat File LockBox.Outputs[Flat File Source Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Flat File LockBox.Outputs[Flat File Source Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Lookup batchID"
                  componentClassID="Microsoft.Lookup"
                  contactInfo="Lookup;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;6"
                  description="Joins additional columns to the data flow by looking up values in a table. For example, join to the 'employee id' column the employees table to get 'hire date' and 'employee name'. We recommend this transformation when the lookup table can fit into memory."
                  name="Lookup batchID"
                  usesDispositions="true"
                  version="6">
                  <properties>
                    <property
                      dataType="System.String"
                      description="Specifies the SQL statement that generates the lookup table."
                      expressionType="Notify"
                      name="SqlCommand"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor">select * from [dbo].[BankBatch]</property>
                    <property
                      dataType="System.String"
                      description="Specifies a SQL statement that uses parameters to generate the lookup table."
                      expressionType="Notify"
                      name="SqlCommandParam"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor">select * from (select * from [dbo].[BankBatch]) [refTable]
where [refTable].[BankBatchNbr] = ? and [refTable].[ImportType] = ?</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the type of connection used to access the reference dataset."
                      name="ConnectionType"
                      typeConverter="LookupConnectionType">0</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the cache type of the lookup table."
                      name="CacheType"
                      typeConverter="CacheType">0</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies how the Lookup transformation handles rows without matching entries in the reference data set."
                      name="NoMatchBehavior"
                      typeConverter="LookupNoMatchBehavior">0</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the percentage of the cache that is allocated for rows with no matching entries in the reference dataset."
                      name="NoMatchCachePercentage">0</property>
                    <property
                      dataType="System.Int32"
                      description="Maximum Memory Usage for Reference Cache on a 32 bit platform."
                      name="MaxMemoryUsage">25</property>
                    <property
                      dataType="System.Int64"
                      description="Maximum Memory Usage for Reference Cache on a 64 bit platform."
                      name="MaxMemoryUsage64">25</property>
                    <property
                      dataType="System.String"
                      description="Indicates whether to reference metadata in an XML format."
                      name="ReferenceMetadataXml">&lt;referenceMetadata&gt;&lt;referenceColumns&gt;&lt;referenceColumn name="BankBatchID" dataType="DT_I4" length="0" precision="0" scale="0" codePage="0"/&gt;&lt;referenceColumn name="BankBatchNbr" dataType="DT_WSTR" length="50" precision="0" scale="0" codePage="0"/&gt;&lt;referenceColumn name="DepositDate" dataType="DT_DBTIMESTAMP" length="0" precision="0" scale="0" codePage="0"/&gt;&lt;referenceColumn name="ReceivedDate" dataType="DT_DBTIMESTAMP" length="0" precision="0" scale="0" codePage="0"/&gt;&lt;referenceColumn name="BalancedDate" dataType="DT_DBTIMESTAMP" length="0" precision="0" scale="0" codePage="0"/&gt;&lt;referenceColumn name="PostedDate" dataType="DT_DBTIMESTAMP" length="0" precision="0" scale="0" codePage="0"/&gt;&lt;referenceColumn name="BatchTotal" dataType="DT_CY" length="0" precision="0" scale="0" codePage="0"/&gt;&lt;referenceColumn name="BatchItems" dataType="DT_I4" length="0" precision="0" scale="0" codePage="0"/&gt;&lt;referenceColumn name="BatchItemsComplete" dataType="DT_I4" length="0" precision="0" scale="0" codePage="0"/&gt;&lt;referenceColumn name="FileBytes" dataType="DT_I4" length="0" precision="0" scale="0" codePage="0"/&gt;&lt;referenceColumn name="FullFilePath" dataType="DT_WSTR" length="1080" precision="0" scale="0" codePage="0"/&gt;&lt;referenceColumn name="ImportType" dataType="DT_STR" length="10" precision="0" scale="0" codePage="1252"/&gt;&lt;referenceColumn name="ErrMsg" dataType="DT_STR" length="1080" precision="0" scale="0" codePage="1252"/&gt;&lt;referenceColumn name="BatchFile" dataType="DT_NTEXT" length="0" precision="0" scale="0" codePage="0"/&gt;&lt;/referenceColumns&gt;&lt;/referenceMetadata&gt;</property>
                    <property
                      containsID="true"
                      dataType="System.String"
                      description="Specifies the list of lineage identifiers that map to the parameters that the SQL statement in the SQLCommand property uses. Entries in the list are separated by semicolons."
                      name="ParameterMap">#{Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Derived Columns from Header.Outputs[Derived Column Output].Columns[BatchNbr]};#{Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Derived Columns from Header.Outputs[Derived Column Output].Columns[ImportType]};</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the column code page to use when code page information is unavailable from the data source."
                      name="DefaultCodePage">1252</property>
                    <property
                      dataType="System.Boolean"
                      description="Determines whether duplicate keys in the reference data should be treated as errors when full cache mode is used."
                      name="TreatDuplicateKeysAsError">false</property>
                  </properties>
                  <connections>
                    <connection
                      refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Lookup batchID.Connections[OleDbConnection]"
                      connectionManagerID="{4640E420-BCC4-43C2-B694-EBB06412AE87}:external"
                      connectionManagerRefId="Project.ConnectionManagers[CaseStudyOLEDB]"
                      description="Connection manager used to access lookup data."
                      name="OleDbConnection" />
                  </connections>
                  <inputs>
                    <input
                      refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Lookup batchID.Inputs[Lookup Input]"
                      name="Lookup Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Lookup batchID.Inputs[Lookup Input].Columns[BatchNbr]"
                          cachedDataType="wstr"
                          cachedLength="12"
                          cachedName="BatchNbr"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Derived Columns from Header.Outputs[Derived Column Output].Columns[BatchNbr]">
                          <properties>
                            <property
                              dataType="System.String"
                              description="Specifies the column in the reference table that a column joins."
                              name="JoinToReferenceColumn">BankBatchNbr</property>
                            <property
                              dataType="System.Null"
                              description="Specifies the column in the reference table from which a column is copied."
                              name="CopyFromReferenceColumn" />
                          </properties>
                        </inputColumn>
                        <inputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Lookup batchID.Inputs[Lookup Input].Columns[ImportType]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="10"
                          cachedName="ImportType"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Derived Columns from Header.Outputs[Derived Column Output].Columns[ImportType]">
                          <properties>
                            <property
                              dataType="System.String"
                              description="Specifies the column in the reference table that a column joins."
                              name="JoinToReferenceColumn">ImportType</property>
                            <property
                              dataType="System.Null"
                              description="Specifies the column in the reference table from which a column is copied."
                              name="CopyFromReferenceColumn" />
                          </properties>
                        </inputColumn>
                      </inputColumns>
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Lookup batchID.Outputs[Lookup Match Output]"
                      errorOrTruncationOperation="Lookup"
                      errorRowDisposition="IgnoreFailure"
                      exclusionGroup="1"
                      name="Lookup Match Output"
                      synchronousInputId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Lookup batchID.Inputs[Lookup Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Lookup batchID.Outputs[Lookup Match Output].Columns[BankBatchID]"
                          dataType="i4"
                          errorOrTruncationOperation="Copy Column"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Lookup batchID.Outputs[Lookup Match Output].Columns[BankBatchID]"
                          name="BankBatchID"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              dataType="System.String"
                              description="Specifies the column in the reference table from which a column is copied."
                              name="CopyFromReferenceColumn">BankBatchID</property>
                          </properties>
                        </outputColumn>
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Lookup batchID.Outputs[Lookup No Match Output]"
                      description="The Lookup output that handles rows with no matching entries in the reference dataset. Use this output when the NoMatchBehavior property is set to &quot;Send rows with no matching entries to the no match output.&quot;"
                      exclusionGroup="1"
                      name="Lookup No Match Output"
                      synchronousInputId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Lookup batchID.Inputs[Lookup Input]">
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Lookup batchID.Outputs[Lookup Error Output]"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="Lookup Error Output"
                      synchronousInputId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Lookup batchID.Inputs[Lookup Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Lookup batchID.Outputs[Lookup Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Lookup batchID.Outputs[Lookup Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Lookup batchID.Outputs[Lookup Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Lookup batchID.Outputs[Lookup Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\OLE DB Destination Error Log"
                  componentClassID="Microsoft.OLEDBDestination"
                  contactInfo="OLE DB Destination;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;4"
                  description="OLE DB Destination"
                  name="OLE DB Destination Error Log"
                  usesDispositions="true"
                  version="4">
                  <properties>
                    <property
                      dataType="System.Int32"
                      description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                      name="CommandTimeout">0</property>
                    <property
                      dataType="System.String"
                      description="Specifies the name of the database object used to open a rowset."
                      name="OpenRowset">[dbo].[ErrorDetail]</property>
                    <property
                      dataType="System.String"
                      description="Specifies the variable that contains the name of the database object used to open a rowset."
                      name="OpenRowsetVariable"></property>
                    <property
                      dataType="System.String"
                      description="The SQL command to be executed."
                      name="SqlCommand"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor"></property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the column code page to use when code page information is unavailable from the data source."
                      name="DefaultCodePage">1252</property>
                    <property
                      dataType="System.Boolean"
                      description="Forces the use of the DefaultCodePage property value when describing character data."
                      name="AlwaysUseDefaultCodePage">false</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the mode used to access the database."
                      name="AccessMode"
                      typeConverter="AccessMode">3</property>
                    <property
                      dataType="System.Boolean"
                      description="Indicates whether the values supplied for identity columns will be copied to the destination. If false, values for identity columns will be auto-generated at the destination. Applies only if fast load is turned on."
                      name="FastLoadKeepIdentity">false</property>
                    <property
                      dataType="System.Boolean"
                      description="Indicates whether the columns containing null will have null inserted in the destination. If false, columns containing null will have their default values inserted at the destination. Applies only if fast load is turned on."
                      name="FastLoadKeepNulls">false</property>
                    <property
                      dataType="System.String"
                      description="Specifies options to be used with fast load.  Applies only if fast load is turned on."
                      name="FastLoadOptions"></property>
                    <property
                      dataType="System.Int32"
                      description="Specifies when commits are issued during data insertion.  A value of 0 specifies that one commit will be issued at the end of data insertion.  Applies only if fast load is turned on."
                      name="FastLoadMaxInsertCommitSize">2147483647</property>
                  </properties>
                  <connections>
                    <connection
                      refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\OLE DB Destination Error Log.Connections[OleDbConnection]"
                      connectionManagerID="{4640E420-BCC4-43C2-B694-EBB06412AE87}:external"
                      connectionManagerRefId="Project.ConnectionManagers[CaseStudyOLEDB]"
                      description="The OLE DB runtime connection used to access the database."
                      name="OleDbConnection" />
                  </connections>
                  <inputs>
                    <input
                      refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\OLE DB Destination Error Log.Inputs[OLE DB Destination Input]"
                      errorOrTruncationOperation="Insert"
                      errorRowDisposition="FailComponent"
                      hasSideEffects="true"
                      name="OLE DB Destination Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\OLE DB Destination Error Log.Inputs[OLE DB Destination Input].Columns[ErrorCode]"
                          cachedDataType="i4"
                          cachedName="ErrorCode"
                          externalMetadataColumnId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\OLE DB Destination Error Log.Inputs[OLE DB Destination Input].ExternalColumns[ErrorCode]"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Derived Columns from Header.Outputs[Derived Column Error Output].Columns[ErrorCode]" />
                        <inputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\OLE DB Destination Error Log.Inputs[OLE DB Destination Input].Columns[ErrorColumn]"
                          cachedDataType="i4"
                          cachedName="ErrorColumn"
                          externalMetadataColumnId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\OLE DB Destination Error Log.Inputs[OLE DB Destination Input].ExternalColumns[ErrorColumn]"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Derived Columns from Header.Outputs[Derived Column Error Output].Columns[ErrorColumn]" />
                        <inputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\OLE DB Destination Error Log.Inputs[OLE DB Destination Input].Columns[ErrorDesc]"
                          cachedDataType="wstr"
                          cachedLength="1048"
                          cachedName="ErrorDesc"
                          externalMetadataColumnId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\OLE DB Destination Error Log.Inputs[OLE DB Destination Input].ExternalColumns[ErrorDesc]"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Script Component to get the Error Desc.Outputs[Output 0].Columns[ErrorDesc]" />
                        <inputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\OLE DB Destination Error Log.Inputs[OLE DB Destination Input].Columns[ErrorEvent]"
                          cachedDataType="wstr"
                          cachedLength="16"
                          cachedName="ErrorEvent"
                          externalMetadataColumnId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\OLE DB Destination Error Log.Inputs[OLE DB Destination Input].ExternalColumns[ErrorEvent]"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Derived Column System Variables.Outputs[Derived Column Output].Columns[ErrorEvent]" />
                        <inputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\OLE DB Destination Error Log.Inputs[OLE DB Destination Input].Columns[ErrorDate]"
                          cachedDataType="dbTimeStamp"
                          cachedName="ErrorDate"
                          externalMetadataColumnId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\OLE DB Destination Error Log.Inputs[OLE DB Destination Input].ExternalColumns[ErrorDate]"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Derived Column System Variables.Outputs[Derived Column Output].Columns[ErrorDate]" />
                        <inputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\OLE DB Destination Error Log.Inputs[OLE DB Destination Input].Columns[ErrorExecutionID]"
                          cachedDataType="wstr"
                          cachedLength="38"
                          cachedName="ErrorExecutionID"
                          externalMetadataColumnId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\OLE DB Destination Error Log.Inputs[OLE DB Destination Input].ExternalColumns[ExecutionID]"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Derived Column System Variables.Outputs[Derived Column Output].Columns[ErrorExecutionID]" />
                        <inputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\OLE DB Destination Error Log.Inputs[OLE DB Destination Input].Columns[line]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="80"
                          cachedName="line"
                          externalMetadataColumnId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\OLE DB Destination Error Log.Inputs[OLE DB Destination Input].ExternalColumns[RawData]"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Flat File LockBox.Outputs[Flat File Source Output].Columns[line]" />
                      </inputColumns>
                      <externalMetadataColumns
                        isUsed="True">
                        <externalMetadataColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\OLE DB Destination Error Log.Inputs[OLE DB Destination Input].ExternalColumns[ExecutionID]"
                          dataType="wstr"
                          length="38"
                          name="ExecutionID" />
                        <externalMetadataColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\OLE DB Destination Error Log.Inputs[OLE DB Destination Input].ExternalColumns[ErrorEvent]"
                          dataType="wstr"
                          length="20"
                          name="ErrorEvent" />
                        <externalMetadataColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\OLE DB Destination Error Log.Inputs[OLE DB Destination Input].ExternalColumns[ErrorCode]"
                          dataType="i4"
                          name="ErrorCode" />
                        <externalMetadataColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\OLE DB Destination Error Log.Inputs[OLE DB Destination Input].ExternalColumns[ErrorColumn]"
                          dataType="i4"
                          name="ErrorColumn" />
                        <externalMetadataColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\OLE DB Destination Error Log.Inputs[OLE DB Destination Input].ExternalColumns[ErrorDesc]"
                          dataType="wstr"
                          length="1048"
                          name="ErrorDesc" />
                        <externalMetadataColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\OLE DB Destination Error Log.Inputs[OLE DB Destination Input].ExternalColumns[ErrorDate]"
                          dataType="dbTimeStamp"
                          name="ErrorDate" />
                        <externalMetadataColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\OLE DB Destination Error Log.Inputs[OLE DB Destination Input].ExternalColumns[RawData]"
                          codePage="1252"
                          dataType="str"
                          length="2048"
                          name="RawData" />
                      </externalMetadataColumns>
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\OLE DB Destination Error Log.Outputs[OLE DB Destination Error Output]"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="OLE DB Destination Error Output"
                      synchronousInputId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\OLE DB Destination Error Log.Inputs[OLE DB Destination Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\OLE DB Destination Error Log.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\OLE DB Destination Error Log.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\OLE DB Destination Error Log.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\OLE DB Destination Error Log.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Record Check Count"
                  componentClassID="Microsoft.RowCount"
                  contactInfo="Row Count;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                  description="Counts rows as they pass through a data flow. For example, use the number of rows processed to determine whether or not to perform cleanup operations, or update text in an e-mail message to communicate processing status."
                  name="Record Check Count">
                  <properties>
                    <property
                      dataType="System.String"
                      description="Specifies the variable to hold the row count."
                      name="VariableName">User::BatchItems</property>
                  </properties>
                  <inputs>
                    <input
                      refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Record Check Count.Inputs[Row Count Input 1]"
                      hasSideEffects="true"
                      name="Row Count Input 1">
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Record Check Count.Outputs[Row Count Output 1]"
                      name="Row Count Output 1"
                      synchronousInputId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Record Check Count.Inputs[Row Count Input 1]">
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Script Component to get the Error Desc"
                  componentClassID="Microsoft.ManagedComponentHost"
                  contactInfo="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum.;Microsoft Corporation; Microsoft SQL Server; Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;11"
                  description="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum."
                  name="Script Component to get the Error Desc"
                  version="11">
                  <properties>
                    <property
                      dataType="System.String"
                      description="Stores the source code of the component"
                      isArray="true"
                      name="SourceCode"
                      state="cdata">
                      <arrayElements
                        arrayElementCount="30">
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Settings.settings]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Resources.resx]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[main.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[#region Help:  Introduction to the Script Component
/* The Script Component allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services data flow.
 *
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script component. */
#endregion

#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;
#endregion

/// <summary>
/// This is the class to which to add your code.  Do not change the name, attributes, or parent
/// of this class.
/// </summary>
[Microsoft.SqlServer.Dts.Pipeline.SSISScriptComponentEntryPointAttribute]
public class ScriptMain : UserComponent
{
    #region Help:  Using Integration Services variables and parameters
    /* To use a variable in this script, first ensure that the variable has been added to
     * either the list contained in the ReadOnlyVariables property or the list contained in
     * the ReadWriteVariables property of this script component, according to whether or not your
     * code needs to write into the variable.  To do so, save this script, close this instance of
     * Visual Studio, and update the ReadOnlyVariables and ReadWriteVariables properties in the
     * Script Transformation Editor window.
     * To use a parameter in this script, follow the same steps. Parameters are always read-only.
     *
     * Example of reading from a variable or parameter:
     *  DateTime startTime = Variables.MyStartTime;
     *
     * Example of writing to a variable:
     *  Variables.myStringVariable = "new value";
     */
    #endregion

    #region Help:  Using Integration Services Connnection Managers
    /* Some types of connection managers can be used in this script component.  See the help topic
     * "Working with Connection Managers Programatically" for details.
     *
     * To use a connection manager in this script, first ensure that the connection manager has
     * been added to either the list of connection managers on the Connection Managers page of the
     * script component editor.  To add the connection manager, save this script, close this instance of
     * Visual Studio, and add the Connection Manager to the list.
     *
     * If the component needs to hold a connection open while processing rows, override the
     * AcquireConnections and ReleaseConnections methods.
     * 
     * Example of using an ADO.Net connection manager to acquire a SqlConnection:
     *  object rawConnection = Connections.SalesDB.AcquireConnection(transaction);
     *  SqlConnection salesDBConn = (SqlConnection)rawConnection;
     *
     * Example of using a File connection manager to acquire a file path:
     *  object rawConnection = Connections.Prices_zip.AcquireConnection(transaction);
     *  string filePath = (string)rawConnection;
     *
     * Example of releasing a connection manager:
     *  Connections.SalesDB.ReleaseConnection(rawConnection);
     */
    #endregion

    #region Help:  Firing Integration Services Events
    /* This script component can fire events.
     *
     * Example of firing an error event:
     *  ComponentMetaData.FireError(10, "Process Values", "Bad value", "", 0, out cancel);
     *
     * Example of firing an information event:
     *  ComponentMetaData.FireInformation(10, "Process Values", "Processing has started", "", 0, fireAgain);
     *
     * Example of firing a warning event:
     *  ComponentMetaData.FireWarning(10, "Process Values", "No rows were received", "", 0);
     */
    #endregion

    /// <summary>
    /// This method is called once, before rows begin to be processed in the data flow.
    ///
    /// You can remove this method if you don't need to do anything here.
    /// </summary>
    public override void PreExecute()
    {
        base.PreExecute();
        /*
         * Add your code here
         */
    }

    /// <summary>
    /// This method is called after all the rows have passed through this component.
    ///
    /// You can delete this method if you don't need to do anything here.
    /// </summary>
    public override void PostExecute()
    {
        base.PostExecute();
        /*
         * Add your code here
         */
    }

    /// <summary>
    /// This method is called once for every row that passes through the component from Input0.
    ///
    /// Example of reading a value from a column in the the row:
    ///  string zipCode = Row.ZipCode
    ///
    /// Example of writing a value to a column in the row:
    ///  Row.ZipCode = zipCode
    /// </summary>
    /// <param name="Row">The row that is currently passing through the component</param>
    public override void Input0_ProcessInputRow(Input0Buffer Row)
    {
        /*
         * Add your code here
         */
        Row.ErrorDesc = ComponentMetaData.GetErrorDescription(Row.ErrorCode);
    }

}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[BufferWrapper.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services buffer wrappers
*  This module defines classes for accessing data flow buffers
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */



using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;

public class Input0Buffer: ScriptBuffer

{
    public Input0Buffer(PipelineBuffer Buffer, int[] BufferColumnIndexes, OutputNameMap OutputMap)
        : base(Buffer, BufferColumnIndexes, OutputMap)
    {
    }

    public String line
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[0]);
        }
    }
    public bool line_IsNull
    {
        get
        {
            return IsNull(0);
        }
    }

    public Int32 ErrorCode
    {
        get
        {
            return Buffer.GetInt32(BufferColumnIndexes[1]);
        }
    }
    public bool ErrorCode_IsNull
    {
        get
        {
            return IsNull(1);
        }
    }

    public Int32 ErrorColumn
    {
        get
        {
            return Buffer.GetInt32(BufferColumnIndexes[2]);
        }
    }
    public bool ErrorColumn_IsNull
    {
        get
        {
            return IsNull(2);
        }
    }

    public String ErrorDesc
    {
        set
        {
            this[3] = value;
        }
    }
    public bool ErrorDesc_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(3);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    new public bool NextRow()
    {
        return base.NextRow();
    }

    new public bool EndOfRowset()
    {
        return base.EndOfRowset();
    }

}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Settings.Designer.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_2215fb197418462e8c4c325b1b2d0ecd.Properties.Settings.get_Default():SC_2215fb197418462e8c4c325b1b2d0ecd.Properties.Sett" +
    "ings")]

namespace SC_2215fb197418462e8c4c325b1b2d0ecd.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[ComponentWrapper.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services component wrapper
*  This module defines the base class for your component
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */

using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;

public class UserComponent: ScriptComponent
{
    public Connections Connections;
    public Variables Variables;
    public UserComponent()
    {
        Connections = new Connections(this);
        Variables = new Variables(this);
    }

    public override void ProcessInput(int InputID, string InputName, PipelineBuffer Buffer, OutputNameMap OutputMap)
    {

        if (InputName.Equals(@"Input 0", StringComparison.Ordinal))
        {
            Input0_ProcessInput(new Input0Buffer(Buffer, GetColumnIndexes(InputID), OutputMap));
        }

    }

    public virtual void Input0_ProcessInput(Input0Buffer Buffer)
    {
        while (Buffer.NextRow())
        {
            Input0_ProcessInputRow(Buffer);
        }
    }

    public virtual void Input0_ProcessInputRow(Input0Buffer Row)
    {
    }

}

public class Connections
{
    ScriptComponent ParentComponent;

    public Connections(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

}

public class Variables
{
    ScriptComponent ParentComponent;

    public Variables(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Project]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF16LE]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:CodeName>SC_2215fb197418462e8c4c325b1b2d0ecd</msb:CodeName>
		<msb:Language>msBuild</msb:Language>
		<msb:DisplayName>SC_2215fb197418462e8c4c325b1b2d0ecd</msb:DisplayName>
		<msb:ProjectId>{F71EE4D8-F0C3-490A-A9A6-3F64CB3FD378}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="SC_2215fb197418462e8c4c325b1b2d0ecd.csproj"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="BufferWrapper.cs"/>
		<msb:File Include="main.cs"/>
		<msb:File Include="ComponentWrapper.cs"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
	</msb:ItemGroup>
</c:Project>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\AssemblyInfo.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("SC_2215fb197418462e8c4c325b1b2d0ecd")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("SC_2215fb197418462e8c4c325b1b2d0ecd")]
[assembly: AssemblyCopyright("Copyright @  2019")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.0.0")]
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[SC_2215fb197418462e8c4c325b1b2d0ecd.csproj]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{0830da2b-d7d7-469c-9c07-942839369370}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>SC_2215fb197418462e8c4c325b1b2d0ecd</RootNamespace>
    <AssemblyName>SC_2215fb197418462e8c4c325b1b2d0ecd</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.TxScript, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSRuntimeWrap, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSPipelineWrap, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.PipelineHost, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Compile Include="main.cs" />
    <Compile Include="BufferWrapper.cs" />
    <Compile Include="ComponentWrapper.cs" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- This section defines VSTA properties that describe the host-changable project properties. -->
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="ScriptComponent" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoExeName="" DebugInfoCommandLine="" DebugInfoWorkingDir="" IconImageList="" />
        <Host Name="ScriptComponent" GeneratedNamespace="SC_2215fb197418462e8c4c325b1b2d0ecd" IconIndex="0"></Host>
        <ProjectClient>
          <HostIdentifier>SSIS_SC130</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Resources.Designer.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_2215fb197418462e8c4c325b1b2d0ecd.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_2215fb197418462e8c4c325b1b2d0ecd.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_2215fb197418462e8c4c325b1b2d0ecd.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace SC_2215fb197418462e8c4c325b1b2d0ecd.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SC_2215fb197418462e8c4c325b1b2d0ecd.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}
]]></arrayElement>
                      </arrayElements>
                    </property>
                    <property
                      dataType="System.String"
                      description="Stores the binary representation of the component"
                      isArray="true"
                      name="BinaryCode"
                      state="cdata">
                      <arrayElements
                        arrayElementCount="2">
                        <arrayElement
                          dataType="System.String"><![CDATA[SC_2215fb197418462e8c4c325b1b2d0ecd.dll]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAPWbJl0AAAAAAAAAAOAAIiALATAAABQAAAAIAAAAAAAAVjMA
AAAgAAAAQAAAAAAAEAAgAAAAAgAABAAAAAAAAAAGAAAAAAAAAACAAAAAAgAAAAAAAAMAYIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAAQzAABPAAAAAEAAAEgEAAAAAAAAAAAAAAAAAAAA
AAAAAGAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAXBMAAAAgAAAAFAAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAEgEAAAAQAAAAAYAAAAWAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAGAAAAACAAAAHAAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAAA4
MwAAAAAAAEgAAAACAAUA8CEAAFwQAAABAAAAAAAAAEwyAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4CKBAAAAoqHgIoEQAACipiAwIoEgAACgNvCAAABm8TAAAK
bwwAAAYqHgIoEAAABioqAgMEBSgUAAAKKlICexUAAAoCexYAAAoWlG8XAAAKKiICFigYAAAKKlIC
exUAAAoCexYAAAoXlG8ZAAAKKiICFygYAAAKKlICexUAAAoCexYAAAoYlG8ZAAAKKiICGCgYAAAK
KiYCGQMoGgAACipaAywIAhkoGwAACipyAQAAcHMcAAAKeh4CKB0AAAoqHgIoHgAACip+AigfAAAK
AgJzFAAABn0BAAAEAgJzFQAABn0CAAAEKpIEcp4AAHAabyAAAAosFQIFAgMoIQAACg4EcwUAAAZv
EgAABipKKwcCA28TAAAGA28OAAAGLfEqBio6AigiAAAKAgN9AwAABCo6AigiAAAKAgN9BAAABCoe
AigiAAAKKq5+BQAABC0ecq4AAHDQBwAAAigjAAAKbyQAAApzJQAACoAFAAAEfgUAAAQqGn4GAAAE
Kh4CgAYAAAQqGn4HAAAEKh4CKCYAAAoqLnMbAAAGgAcAAAQqAAAAQlNKQgEAAQAAAAAADAAAAHY0
LjAuMzAzMTkAAAAABQBsAAAA+AUAACN+AABkBgAAFAcAACNTdHJpbmdzAAAAAHgNAAAgAQAAI1VT
AJgOAAAQAAAAI0dVSUQAAACoDgAAtAEAACNCbG9iAAAAAAAAAAIAAAFXFaABCQEAAAD6ATMAFgAA
AQAAACAAAAAIAAAABwAAABwAAAAPAAAAJgAAABAAAAADAAAACwAAAAwAAAABAAAABQAAAAEAAAAA
AEoDAQAAAAAABgBBAksFBgDVAksFBgCNATgFDwC/BQAABgC6ASwEBgAkAiwEBgAFAiwEBgC8AiwE
BgBhAiwEBgB6AiwEBgDRASwEBgDsARADCgCVAtoACgDhBNoADgDSBNoACgCJBNoACgCFBtoABgBI
BtQDBgBwATgFBgDyBGsFBgB9BBcEEgBAATQDEgChATQDEgAoAQIEBgBVAUsFFgABAAIFBgA+BNQD
BgAtA9QDBgBsBNQDBgD7ANQDBgCjANQDBgAKBywEAAAAACMAAAAAAAEAAQABABAA5wMAABAAAQAB
AAEAEADFBAAAOQABAAUAAQAQAGcGAABFAAEAEAABABAAPAYAAEkAAwAUAAEAEAD9BQAASQAEABUA
AAAQAHIFzgVJAAUAFgAAARAALAbOBWEABwAaAAYAPAZ/AAYA/QWDAAEAdQaHAAEAdQaHABEA2wOL
ABEAGAGPABEAhQCTAFAgAAAAAMYA8wIGAAEAWCAAAAAAxgD+AgYAAQBgIAAAAADGAOcGlwABAHkg
AAAAAIYYKwUGAAIAgSAAAAAAhhgrBSUAAgCMIAAAAACGCNEAnQAFAKEgAAAAAIYInANHAAUAqiAA
AAAAhgiVAKEABQC/IAAAAACGCIcDRwAFAMggAAAAAIYI8gOhAAUA3SAAAAAAhgisA0cABQDmIAAA
AACGCFMAEAAFAPAgAAAAAIYIcgOlAAYAByEAAAAAhgD+BkcABwAPIQAAAACGAE8GRwAHABchAAAA
AIYYKwUGAAcANyEAAAAAxgDaBqoABwBcIQAAAADGAdMGlwALAG8hAAAAAMYB5waXAAwAcSEAAAAA
hhgrBbQADQCAIQAAAACGGCsFtAAOAI8hAAAAAIMYKwUGAA8AlyEAAAAAkwjuBLoADwDDIQAAAACT
CAABvwAPAMohAAAAAJMIDAHEAA8A0iEAAAAAlghbBsoAEADZIQAAAACGGCsFBgAQAOEhAAAAAJEY
MQXPABAAAAABAAIHAAABAOcEAAACAAcGAAADAJcEAAABAAoDAAABAAoDAAABACwAAAACAMcAAAAD
AOcEAAAEAJcEAAABAOcEAAABAAIHAAABAIsGAAABAIsGAAABAAoDCQArBQEAEQArBQYAGQArBQoA
KQArBRAAMQArBRAAOQArBRAAQQArBRAASQArBRAAUQArBRAAWQArBRAAYQArBRAAaQArBQYAmQAr
BQYAuQArBRUAyQArBQYAiQDzAgYAiQD+AgYAiQA0ABsA0QBYBCAAcQArBSUAcQDnBC8AcQAHBjMA
eQAqAyAAcQC8AzcAeQAaADwAcQDLA0EAcQDDAwEA2QArBRAAcQD+BkcAcQBPBkcAiQArBQYA4QA1
BksAiQAbBlIAkQArBQYA8QC1AFgA8QAGB18AoQArBWUAwQArBQYALgALAO4ALgATAPcALgAbABYB
LgAjAB8BLgArAEgBLgAzAEgBLgA7AEgBLgBDAB8BLgBLAE4BLgBTAEgBLgBbAGUBQwBjAK8B4QB7
AK8B4wBrAK8BKQFzABYBSQFzABYBAwABAAcACQAIAAsAAAD2ANMAAACgA9cAAACZANsAAACLA9cA
AAD2A9sAAACwA9cAAABXANMAAAB2A9cAAADyBN8AAAAgAeQAAABfBukAAgAGAAMAAgAHAAUAAgAI
AAcAAgAJAAkAAgAKAAsAAgALAA0AAQAMAA8AAQANABEAAgAXABMAAgAYABUAAQAZABUAAgAaABcA
BIAAAAEAAAAAAAAAAAAAAAAAYQAAAAQAAAAAAAAAAAAAAG0ASgAAAAAADgAAAAAAAAAAAAAAdgCV
BgAAAAAOAAAAAAAAAAAAAAB2ALIGAAAAAAQAAAAAAAAAAAAAAG0A1AMAAAAADgAAAAAAAAAAAAAA
dgChBAAAAAAAAAAAAQAAAHwFAAAAAABJRFRTQ29tcG9uZW50TWV0YURhdGExMDAAR2V0SW50MzIA
PE1vZHVsZT4ASW5wdXRJRABnZXRfQ29tcG9uZW50TWV0YURhdGEAbXNjb3JsaWIAc2V0X0Vycm9y
RGVzYwBTQ18yMjE1ZmIxOTc0MTg0NjJlOGM0YzMyNWIxYjJkMGVjZABkZWZhdWx0SW5zdGFuY2UA
Z2V0X0Vycm9yQ29kZQBSdW50aW1lVHlwZUhhbmRsZQBHZXRUeXBlRnJvbUhhbmRsZQBJbnB1dE5h
bWUAZ2V0X2xpbmUATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuUGlwZWxpbmUAVHlwZQBnZXRfQ3Vs
dHVyZQBzZXRfQ3VsdHVyZQByZXNvdXJjZUN1bHR1cmUAQXBwbGljYXRpb25TZXR0aW5nc0Jhc2UA
RWRpdG9yQnJvd3NhYmxlU3RhdGUAQ29tcGlsZXJHZW5lcmF0ZWRBdHRyaWJ1dGUARGVidWdnZXJO
b25Vc2VyQ29kZUF0dHJpYnV0ZQBEZWJ1Z2dhYmxlQXR0cmlidXRlAEVkaXRvckJyb3dzYWJsZUF0
dHJpYnV0ZQBBc3NlbWJseVRpdGxlQXR0cmlidXRlAEFzc2VtYmx5VHJhZGVtYXJrQXR0cmlidXRl
AFRhcmdldEZyYW1ld29ya0F0dHJpYnV0ZQBBc3NlbWJseUNvbmZpZ3VyYXRpb25BdHRyaWJ1dGUA
QXNzZW1ibHlEZXNjcmlwdGlvbkF0dHJpYnV0ZQBDb21waWxhdGlvblJlbGF4YXRpb25zQXR0cmli
dXRlAEFzc2VtYmx5UHJvZHVjdEF0dHJpYnV0ZQBBc3NlbWJseUNvcHlyaWdodEF0dHJpYnV0ZQBT
U0lTU2NyaXB0Q29tcG9uZW50RW50cnlQb2ludEF0dHJpYnV0ZQBBc3NlbWJseUNvbXBhbnlBdHRy
aWJ1dGUAUnVudGltZUNvbXBhdGliaWxpdHlBdHRyaWJ1dGUAUHJlRXhlY3V0ZQBQb3N0RXhlY3V0
ZQB2YWx1ZQBTeXN0ZW0uUnVudGltZS5WZXJzaW9uaW5nAEdldFN0cmluZwBTeXN0ZW0uQ29tcG9u
ZW50TW9kZWwAU0NfMjIxNWZiMTk3NDE4NDYyZThjNGMzMjViMWIyZDBlY2QuZGxsAHNldF9FcnJv
ckRlc2NfSXNOdWxsAGdldF9FcnJvckNvZGVfSXNOdWxsAGdldF9saW5lX0lzTnVsbABnZXRfRXJy
b3JDb2x1bW5fSXNOdWxsAFNldE51bGwAc2V0X0l0ZW0AU3lzdGVtAHJlc291cmNlTWFuAFNjcmlw
dE1haW4AZ2V0X0Vycm9yQ29sdW1uAFN5c3RlbS5Db25maWd1cmF0aW9uAFN5c3RlbS5HbG9iYWxp
emF0aW9uAFN5c3RlbS5SZWZsZWN0aW9uAEludmFsaWRPcGVyYXRpb25FeGNlcHRpb24AR2V0RXJy
b3JEZXNjcmlwdGlvbgBTdHJpbmdDb21wYXJpc29uAEN1bHR1cmVJbmZvAE91dHB1dE5hbWVNYXAA
T3V0cHV0TWFwAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRFRTUGlwZWxpbmVXcmFwAElucHV0MEJ1ZmZl
cgBQaXBlbGluZUJ1ZmZlcgBTY3JpcHRCdWZmZXIAZ2V0X1Jlc291cmNlTWFuYWdlcgBNaWNyb3Nv
ZnQuU3FsU2VydmVyLkR0cy5QaXBlbGluZS5XcmFwcGVyAC5jdG9yAC5jY3RvcgBTeXN0ZW0uRGlh
Z25vc3RpY3MAU3lzdGVtLlJ1bnRpbWUuQ29tcGlsZXJTZXJ2aWNlcwBTeXN0ZW0uUmVzb3VyY2Vz
AFNDXzIyMTVmYjE5NzQxODQ2MmU4YzRjMzI1YjFiMmQwZWNkLlByb3BlcnRpZXMuUmVzb3VyY2Vz
LnJlc291cmNlcwBEZWJ1Z2dpbmdNb2RlcwBTQ18yMjE1ZmIxOTc0MTg0NjJlOGM0YzMyNWIxYjJk
MGVjZC5Qcm9wZXJ0aWVzAFZhcmlhYmxlcwBCdWZmZXJDb2x1bW5JbmRleGVzAEdldENvbHVtbklu
ZGV4ZXMAU2V0dGluZ3MARXF1YWxzAENvbm5lY3Rpb25zAE9iamVjdABFbmRPZlJvd3NldABnZXRf
RGVmYXVsdABVc2VyQ29tcG9uZW50AFBhcmVudENvbXBvbmVudABTY3JpcHRDb21wb25lbnQATWlj
cm9zb2Z0LlNxbFNlcnZlci5UeFNjcmlwdABNaWNyb3NvZnQuU3FsU2VydmVyLlBpcGVsaW5lSG9z
dABJbnB1dDBfUHJvY2Vzc0lucHV0AElucHV0MF9Qcm9jZXNzSW5wdXRSb3cATmV4dFJvdwBnZXRf
QXNzZW1ibHkAAACAm0kAcwBOAHUAbABsACAAcAByAG8AcABlAHIAdAB5ACAAYwBhAG4AbgBvAHQA
IABiAGUAIABzAGUAdAAgAHQAbwAgAEYAYQBsAHMAZQAuACAAQQBzAHMAaQBnAG4AIABhACAAdgBh
AGwAdQBlACAAdABvACAAdABoAGUAIABjAG8AbAB1AG0AbgAgAGkAbgBzAHQAZQBhAGQALgAAD0kA
bgBwAHUAdAAgADAAAHFTAEMAXwAyADIAMQA1AGYAYgAxADkANwA0ADEAOAA0ADYAMgBlADgAYwA0
AGMAMwAyADUAYgAxAGIAMgBkADAAZQBjAGQALgBQAHIAbwBwAGUAcgB0AGkAZQBzAC4AUgBlAHMA
bwB1AHIAYwBlAHMAAGzfVioutgVMvyS/5hEQUsgABCABAQgDIAABBSABARERBCABAQ4FIAEBEVkE
IAASaQQgAQ4ICSADARI9HQgSQQMGEj0DBh0IBCABAggEIAEICAUgAgEIHAMgAAIGIAICDhF1BSAB
HQgIBgABEnkRfQUgABKAgQcgAgEOEoCBCLd6XFYZNOCJCImEXc2AgMyRAwYSFAMGEhgDBhJFAwYS
UQMGElUDBhIgBSABARIMAyAADgMgAAgEIAEBAgkgBAEIDhI9EkEFIAEBEkUEAAASUQQAABJVBQAB
ARJVBAAAEiADAAABAygADgMoAAIDKAAIBAgAElEECAASVQQIABIgCAEACAAAAAAAHgEAAQBUAhZX
cmFwTm9uRXhjZXB0aW9uVGhyb3dzAQgBAAIAAAAAACgBACNTQ18yMjE1ZmIxOTc0MTg0NjJlOGM0
YzMyNWIxYjJkMGVjZAAABQEAAAAAFgEAEUNvcHlyaWdodCBAICAyMDE5AABJAQAaLk5FVEZyYW1l
d29yayxWZXJzaW9uPXY0LjUBAFQOFEZyYW1ld29ya0Rpc3BsYXlOYW1lEi5ORVQgRnJhbWV3b3Jr
IDQuNQQBAAAAtAAAAM7K774BAAAAkQAAAGxTeXN0ZW0uUmVzb3VyY2VzLlJlc291cmNlUmVhZGVy
LCBtc2NvcmxpYiwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRv
a2VuPWI3N2E1YzU2MTkzNGUwODkjU3lzdGVtLlJlc291cmNlcy5SdW50aW1lUmVzb3VyY2VTZXQC
AAAAAAAAAAAAAABQQURQQURQtAAAACwzAAAAAAAAAAAAAEYzAAAAIAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAA4MwAAAAAAAAAAAAAAAF9Db3JEbGxNYWluAG1zY29yZWUuZGxsAAAAAAD/JQAgABAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAQAQAAAAGAAAgAAAAAAAAAAAAAAAAAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAA
SAAAAFhAAADsAwAAAAAAAAAAAADsAzQAAABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAA
AAAAvQTv/gAAAQAAAAEAAAAAAAAAAQAAAAAAPwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQA
AAABAFYAYQByAEYAaQBsAGUASQBuAGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBu
AAAAAAAAALAETAMAAAEAUwB0AHIAaQBuAGcARgBpAGwAZQBJAG4AZgBvAAAAKAMAAAEAMAAwADAA
MAAwADQAYgAwAAAAGgABAAEAQwBvAG0AbQBlAG4AdABzAAAAAAAAACIAAQABAEMAbwBtAHAAYQBu
AHkATgBhAG0AZQAAAAAAAAAAAHAAJAABAEYAaQBsAGUARABlAHMAYwByAGkAcAB0AGkAbwBuAAAA
AABTAEMAXwAyADIAMQA1AGYAYgAxADkANwA0ADEAOAA0ADYAMgBlADgAYwA0AGMAMwAyADUAYgAx
AGIAMgBkADAAZQBjAGQAAAAwAAgAAQBGAGkAbABlAFYAZQByAHMAaQBvAG4AAAAAADEALgAwAC4A
MAAuADAAAABwACgAAQBJAG4AdABlAHIAbgBhAGwATgBhAG0AZQAAAFMAQwBfADIAMgAxADUAZgBi
ADEAOQA3ADQAMQA4ADQANgAyAGUAOABjADQAYwAzADIANQBiADEAYgAyAGQAMABlAGMAZAAuAGQA
bABsAAAASAASAAEATABlAGcAYQBsAEMAbwBwAHkAcgBpAGcAaAB0AAAAQwBvAHAAeQByAGkAZwBo
AHQAIABAACAAIAAyADAAMQA5AAAAKgABAAEATABlAGcAYQBsAFQAcgBhAGQAZQBtAGEAcgBrAHMA
AAAAAAAAAAB4ACgAAQBPAHIAaQBnAGkAbgBhAGwARgBpAGwAZQBuAGEAbQBlAAAAUwBDAF8AMgAy
ADEANQBmAGIAMQA5ADcANAAxADgANAA2ADIAZQA4AGMANABjADMAMgA1AGIAMQBiADIAZAAwAGUA
YwBkAC4AZABsAGwAAABoACQAAQBQAHIAbwBkAHUAYwB0AE4AYQBtAGUAAAAAAFMAQwBfADIAMgAx
ADUAZgBiADEAOQA3ADQAMQA4ADQANgAyAGUAOABjADQAYwAzADIANQBiADEAYgAyAGQAMABlAGMA
ZAAAADQACAABAFAAcgBvAGQAdQBjAHQAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4AMAAuADAAAAA4
AAgAAQBBAHMAcwBlAG0AYgBsAHkAIABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgAwAC4AMAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAMAAAAWDMAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA]]></arrayElement>
                      </arrayElements>
                    </property>
                    <property
                      dataType="System.String"
                      description="Specifies the name of the Microsoft Visual Studio Tools for Applications project. Project names must be unique within a package."
                      name="VSTAProjectName"
                      typeConverter="NOTBROWSABLE">SC_2215fb197418462e8c4c325b1b2d0ecd</property>
                    <property
                      dataType="System.String"
                      description="Specifies the programming language used by the script."
                      name="ScriptLanguage"
                      typeConverter="Microsoft.SqlServer.VSTAHosting.ScriptingLanguages">CSharp</property>
                    <property
                      dataType="System.String"
                      description="Specifies a comma-separated list of read-only variables."
                      name="ReadOnlyVariables"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIVariablePickerDlg"></property>
                    <property
                      dataType="System.String"
                      description="Specifies a comma-separated list of read/write variables."
                      name="ReadWriteVariables"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIWriteableVariablePickerDlg"></property>
                    <property
                      dataType="System.String"
                      description="List of breakpoints present on the script."
                      isArray="true"
                      name="BreakpointCollection"
                      typeConverter="NOTBROWSABLE">
                      <arrayElements
                        arrayElementCount="0" />
                    </property>
                    <property
                      dataType="System.String"
                      description="Checksum to match component metedata against compiled codes."
                      name="MetadataChecksum140"
                      typeConverter="NOTBROWSABLE">97</property>
                    <property
                      dataType="System.String"
                      name="UserComponentTypeName">Microsoft.ScriptComponentHost</property>
                  </properties>
                  <inputs>
                    <input
                      refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Script Component to get the Error Desc.Inputs[Input 0]"
                      hasSideEffects="true"
                      name="Input 0">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Script Component to get the Error Desc.Inputs[Input 0].Columns[line]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="80"
                          cachedName="line"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Flat File LockBox.Outputs[Flat File Source Output].Columns[line]" />
                        <inputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Script Component to get the Error Desc.Inputs[Input 0].Columns[ErrorCode]"
                          cachedDataType="i4"
                          cachedName="ErrorCode"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Derived Columns from Header.Outputs[Derived Column Error Output].Columns[ErrorCode]" />
                        <inputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Script Component to get the Error Desc.Inputs[Input 0].Columns[ErrorColumn]"
                          cachedDataType="i4"
                          cachedName="ErrorColumn"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Derived Columns from Header.Outputs[Derived Column Error Output].Columns[ErrorColumn]" />
                      </inputColumns>
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Script Component to get the Error Desc.Outputs[Output 0]"
                      name="Output 0"
                      synchronousInputId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Script Component to get the Error Desc.Inputs[Input 0]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Script Component to get the Error Desc.Outputs[Output 0].Columns[ErrorDesc]"
                          dataType="wstr"
                          length="1048"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Script Component to get the Error Desc.Outputs[Output 0].Columns[ErrorDesc]"
                          name="ErrorDesc" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Script Component to Store Variables"
                  componentClassID="Microsoft.ManagedComponentHost"
                  contactInfo="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum.;Microsoft Corporation; Microsoft SQL Server; Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;11"
                  description="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum."
                  name="Script Component to Store Variables"
                  version="11">
                  <properties>
                    <property
                      dataType="System.String"
                      description="Stores the source code of the component"
                      isArray="true"
                      name="SourceCode"
                      state="cdata">
                      <arrayElements
                        arrayElementCount="30">
                        <arrayElement
                          dataType="System.String"><![CDATA[ComponentWrapper.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services component wrapper
*  This module defines the base class for your component
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */

using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;

public class UserComponent: ScriptComponent
{
    public Connections Connections;
    public Variables Variables;
    public UserComponent()
    {
        Connections = new Connections(this);
        Variables = new Variables(this);
    }

    public override void ProcessInput(int InputID, string InputName, PipelineBuffer Buffer, OutputNameMap OutputMap)
    {

        if (InputName.Equals(@"Input 0", StringComparison.Ordinal))
        {
            Input0_ProcessInput(new Input0Buffer(Buffer, GetColumnIndexes(InputID), OutputMap));
        }

    }

    public virtual void Input0_ProcessInput(Input0Buffer Buffer)
    {
        while (Buffer.NextRow())
        {
            Input0_ProcessInputRow(Buffer);
        }
    }

    public virtual void Input0_ProcessInputRow(Input0Buffer Row)
    {
    }

}

public class Connections
{
    ScriptComponent ParentComponent;

    public Connections(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

}

public class Variables
{
    ScriptComponent ParentComponent;

    public Variables(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

    public Int32 BankBatchID
    {
        get
        {
            return (Int32)(ParentComponent.ReadWriteVariables["BankBatchID"].GetValueWithContext(ScriptComponent.EvaluatorContext));
        }
        set
        {
            ParentComponent.ReadWriteVariables["BankBatchID"].Value = value;
        }
    }

    public String BankBatchNbr
    {
        get
        {
            return (String)(ParentComponent.ReadWriteVariables["BankBatchNbr"].GetValueWithContext(ScriptComponent.EvaluatorContext));
        }
        set
        {
            ParentComponent.ReadWriteVariables["BankBatchNbr"].Value = value;
        }
    }

    public Double BatchTotal
    {
        get
        {
            return (Double)(ParentComponent.ReadWriteVariables["BatchTotal"].GetValueWithContext(ScriptComponent.EvaluatorContext));
        }
        set
        {
            ParentComponent.ReadWriteVariables["BatchTotal"].Value = value;
        }
    }

    public DateTime DepositDate
    {
        get
        {
            return (DateTime)(ParentComponent.ReadWriteVariables["DepositDate"].GetValueWithContext(ScriptComponent.EvaluatorContext));
        }
        set
        {
            ParentComponent.ReadWriteVariables["DepositDate"].Value = value;
        }
    }

}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Resources.resx]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[main.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[#region Help:  Introduction to the Script Component
/* The Script Component allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services data flow.
 *
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script component. */
#endregion

#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;
#endregion

/// <summary>
/// This is the class to which to add your code.  Do not change the name, attributes, or parent
/// of this class.
/// </summary>
[Microsoft.SqlServer.Dts.Pipeline.SSISScriptComponentEntryPointAttribute]
public class ScriptMain : UserComponent
{
    #region Help:  Using Integration Services variables and parameters
    /* To use a variable in this script, first ensure that the variable has been added to
     * either the list contained in the ReadOnlyVariables property or the list contained in
     * the ReadWriteVariables property of this script component, according to whether or not your
     * code needs to write into the variable.  To do so, save this script, close this instance of
     * Visual Studio, and update the ReadOnlyVariables and ReadWriteVariables properties in the
     * Script Transformation Editor window.
     * To use a parameter in this script, follow the same steps. Parameters are always read-only.
     *
     * Example of reading from a variable or parameter:
     *  DateTime startTime = Variables.MyStartTime;
     *
     * Example of writing to a variable:
     *  Variables.myStringVariable = "new value";
     */
    #endregion

    #region Help:  Using Integration Services Connnection Managers
    /* Some types of connection managers can be used in this script component.  See the help topic
     * "Working with Connection Managers Programatically" for details.
     *
     * To use a connection manager in this script, first ensure that the connection manager has
     * been added to either the list of connection managers on the Connection Managers page of the
     * script component editor.  To add the connection manager, save this script, close this instance of
     * Visual Studio, and add the Connection Manager to the list.
     *
     * If the component needs to hold a connection open while processing rows, override the
     * AcquireConnections and ReleaseConnections methods.
     * 
     * Example of using an ADO.Net connection manager to acquire a SqlConnection:
     *  object rawConnection = Connections.SalesDB.AcquireConnection(transaction);
     *  SqlConnection salesDBConn = (SqlConnection)rawConnection;
     *
     * Example of using a File connection manager to acquire a file path:
     *  object rawConnection = Connections.Prices_zip.AcquireConnection(transaction);
     *  string filePath = (string)rawConnection;
     *
     * Example of releasing a connection manager:
     *  Connections.SalesDB.ReleaseConnection(rawConnection);
     */
    #endregion

    #region Help:  Firing Integration Services Events
    /* This script component can fire events.
     *
     * Example of firing an error event:
     *  ComponentMetaData.FireError(10, "Process Values", "Bad value", "", 0, out cancel);
     *
     * Example of firing an information event:
     *  ComponentMetaData.FireInformation(10, "Process Values", "Processing has started", "", 0, fireAgain);
     *
     * Example of firing a warning event:
     *  ComponentMetaData.FireWarning(10, "Process Values", "No rows were received", "", 0);
     */
    #endregion

    public int localBankBatchID = 0;
    public double localBatchTotal = 0;
    public string localBatchNbr = "";
    public DateTime localDepositDate = DateTime.MinValue;
    public bool bVal;

    /// <summary>
    /// This method is called once, before rows begin to be processed in the data flow.
    ///
    /// You can remove this method if you don't need to do anything here.
    /// </summary>
    public override void PreExecute()
    {
        base.PreExecute();
        /*
         * Add your code here
         */
    }

    /// <summary>
    /// This method is called after all the rows have passed through this component.
    ///
    /// You can delete this method if you don't need to do anything here.
    /// </summary>
    public override void PostExecute()
    {
        base.PostExecute();
        /*
         * Add your code here
         */

        try
        {
            Variables.BankBatchID = localBankBatchID;
            Variables.BankBatchNbr = localBatchNbr;
            Variables.BatchTotal = localBatchTotal;
            Variables.DepositDate = localDepositDate;
        }
        catch (Exception ex)
        {
            Variables.BankBatchID = System.Convert.ToInt32(0);
            Variables.BatchTotal = System.Convert.ToDouble(0);
            ComponentMetaData.FireError(0, "", ex.Message, "", 1, out bVal);
        }
    }

    /// <summary>
    /// This method is called once for every row that passes through the component from Input0.
    ///
    /// Example of reading a value from a column in the the row:
    ///  string zipCode = Row.ZipCode
    ///
    /// Example of writing a value to a column in the row:
    ///  Row.ZipCode = zipCode
    /// </summary>
    /// <param name="Row">The row that is currently passing through the component</param>
    public override void Input0_ProcessInputRow(Input0Buffer Row)
    {
        /*
         * Add your code here
         */
        string msg = string.Empty;

        try
        {
            if (Row.DepositeDate_IsNull || Row.BatchTotal_IsNull || (double)Row.BatchTotal == 0D)
            {
                localBankBatchID = 0;
                localBatchTotal = 0D;
            }
            else 
            {
                if (Row.BankBatchID_IsNull)
                {
                    localBankBatchID = 0;
                }
                else
                {
                    localBankBatchID = Row.BankBatchID;
                }

                localBatchNbr = Row.BatchNbr;
                localBatchTotal = (Double)Row.BatchTotal/System.Convert.ToDouble(100);
                localDepositDate = Row.DepositeDate;
            }
            msg = string.Format("Variables: BankBatchID = {0}, BatchTotal = {1}, BatchNbr = {2}", localBankBatchID, localBatchTotal, localDepositDate);
            ComponentMetaData.FireInformation(0, ComponentMetaData.Name, msg, "", 0, ref bVal);
        }
        catch (Exception ex)
        {
            ComponentMetaData.FireError(0, "", ex.Message, "", 1, out bVal);
        }
    }

}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[BufferWrapper.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services buffer wrappers
*  This module defines classes for accessing data flow buffers
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */



using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;

public class Input0Buffer: ScriptBuffer

{
    public Input0Buffer(PipelineBuffer Buffer, int[] BufferColumnIndexes, OutputNameMap OutputMap)
        : base(Buffer, BufferColumnIndexes, OutputMap)
    {
    }

    public String line
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[0]);
        }
    }
    public bool line_IsNull
    {
        get
        {
            return IsNull(0);
        }
    }

    public String BatchNbr
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[1]);
        }
    }
    public bool BatchNbr_IsNull
    {
        get
        {
            return IsNull(1);
        }
    }

    public Decimal BatchTotal
    {
        get
        {
            return Buffer.GetDecimal(BufferColumnIndexes[2]);
        }
    }
    public bool BatchTotal_IsNull
    {
        get
        {
            return IsNull(2);
        }
    }

    public String ImportType
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[3]);
        }
    }
    public bool ImportType_IsNull
    {
        get
        {
            return IsNull(3);
        }
    }

    public DateTime DepositeDate
    {
        get
        {
            return Buffer.GetDateTime(BufferColumnIndexes[4]);
        }
    }
    public bool DepositeDate_IsNull
    {
        get
        {
            return IsNull(4);
        }
    }

    public Int32 BankBatchID
    {
        get
        {
            return Buffer.GetInt32(BufferColumnIndexes[5]);
        }
    }
    public bool BankBatchID_IsNull
    {
        get
        {
            return IsNull(5);
        }
    }

    new public bool NextRow()
    {
        return base.NextRow();
    }

    new public bool EndOfRowset()
    {
        return base.EndOfRowset();
    }

}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Settings.Designer.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_e9dd61605eac4d91b62c665997e06ac1.Properties.Settings.get_Default():SC_e9dd61605eac4d91b62c665997e06ac1.Properties.Sett" +
    "ings")]

namespace SC_e9dd61605eac4d91b62c665997e06ac1.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[SC_e9dd61605eac4d91b62c665997e06ac1.csproj]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{0b65d94f-54e9-4b43-af29-5d1656013f14}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>SC_e9dd61605eac4d91b62c665997e06ac1</RootNamespace>
    <AssemblyName>SC_e9dd61605eac4d91b62c665997e06ac1</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.TxScript, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSRuntimeWrap, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSPipelineWrap, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.PipelineHost, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Compile Include="main.cs" />
    <Compile Include="BufferWrapper.cs" />
    <Compile Include="ComponentWrapper.cs" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- This section defines VSTA properties that describe the host-changable project properties. -->
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="ScriptComponent" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoExeName="" DebugInfoCommandLine="" DebugInfoWorkingDir="" IconImageList="" />
        <Host Name="ScriptComponent" GeneratedNamespace="SC_e9dd61605eac4d91b62c665997e06ac1" IconIndex="0"></Host>
        <ProjectClient>
          <HostIdentifier>SSIS_SC130</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Project]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF16LE]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:CodeName>SC_e9dd61605eac4d91b62c665997e06ac1</msb:CodeName>
		<msb:Language>msBuild</msb:Language>
		<msb:DisplayName>SC_e9dd61605eac4d91b62c665997e06ac1</msb:DisplayName>
		<msb:ProjectId>{771A226D-8021-4008-A66A-A1F318AD546F}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="SC_e9dd61605eac4d91b62c665997e06ac1.csproj"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="BufferWrapper.cs"/>
		<msb:File Include="main.cs"/>
		<msb:File Include="ComponentWrapper.cs"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
	</msb:ItemGroup>
</c:Project>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\AssemblyInfo.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("SC_e9dd61605eac4d91b62c665997e06ac1")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("SC_e9dd61605eac4d91b62c665997e06ac1")]
[assembly: AssemblyCopyright("Copyright @  2019")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.0.0")]
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Settings.settings]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Resources.Designer.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_e9dd61605eac4d91b62c665997e06ac1.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_e9dd61605eac4d91b62c665997e06ac1.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_e9dd61605eac4d91b62c665997e06ac1.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace SC_e9dd61605eac4d91b62c665997e06ac1.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SC_e9dd61605eac4d91b62c665997e06ac1.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}
]]></arrayElement>
                      </arrayElements>
                    </property>
                    <property
                      dataType="System.String"
                      description="Stores the binary representation of the component"
                      isArray="true"
                      name="BinaryCode"
                      state="cdata">
                      <arrayElements
                        arrayElementCount="2">
                        <arrayElement
                          dataType="System.String"><![CDATA[SC_e9dd61605eac4d91b62c665997e06ac1.dll]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAG3mJl0AAAAAAAAAAOAAIiALATAAABwAAAAIAAAAAAAAXjsA
AAAgAAAAQAAAAAAAEAAgAAAAAgAABAAAAAAAAAAGAAAAAAAAAACAAAAAAgAAAAAAAAMAYIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAAw7AABPAAAAAEAAAEgEAAAAAAAAAAAAAAAAAAAA
AAAAAGAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAZBsAAAAgAAAAHAAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAEgEAAAAQAAAAAYAAAAeAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAGAAAAACAAAAJAAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAABA
OwAAAAAAAEgAAAACAAUAGCUAADwVAAABAAAAAAAAAFQ6AAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4CKBAAAAoqGzAHAJUAAAABAAARAigRAAAKAnsHAAAEAnsB
AAAEbxsAAAYCewcAAAQCewMAAARvHQAABgJ7BwAABAJ7AgAABG8fAAAGAnsHAAAEAnsEAAAEbyEA
AAbeSAoCewcAAAQWKBIAAApvGwAABgJ7BwAABBYoEwAACm8fAAAGAigUAAAKFnIBAABwBm8VAAAK
cgEAAHAXAnwFAAAEbxYAAAreACoAAAABEAAAAAAGAEZMAEgPAAABGzAHAA0BAAACAAARfhcAAAoK
A28PAAAGLR8DbwsAAAYtFwNvCgAABigYAAAKbCMAAAAAAAAAADMYAhZ9AQAABAIjAAAAAAAAAAB9
AgAABCtPA28RAAAGLAkCFn0BAAAEKwwCA28QAAAGfQEAAAQCA28IAAAGfQMAAAQCA28KAAAGKBgA
AApsH2QoEwAAClt9AgAABAIDbw4AAAZ9BAAABHIDAABwAnsBAAAEjCAAAAECewIAAASMIQAAAQJ7
BAAABIwOAAABKBkAAAoKAigUAAAKFgIoFAAACm8aAAAKBnIBAABwFgJ8BQAABG8bAAAK3iYLAigU
AAAKFnIBAABwB28VAAAKcgEAAHAXAnwFAAAEbxYAAAreACoAAAABEAAAAAAGAODmACYPAAABdgJy
AQAAcH0DAAAEAn4cAAAKfQQAAAQCKBQAAAYqKgIDBAUoHQAACipSAnseAAAKAnsfAAAKFpRvIAAA
CioiAhYoIQAACipSAnseAAAKAnsfAAAKF5RvIAAACioiAhcoIQAACipSAnseAAAKAnsfAAAKGJRv
IgAACioiAhgoIQAACipSAnseAAAKAnsfAAAKGZRvIAAACioiAhkoIQAACipSAnseAAAKAnsfAAAK
GpRvIwAACioiAhooIQAACipSAnseAAAKAnsfAAAKG5RvJAAACioiAhsoIQAACioeAiglAAAKKh4C
KCYAAAoqfgIoJwAACgICcxgAAAZ9BgAABAICcxkAAAZ9BwAABCqSBHKBAABwGm8oAAAKLBUCBQID
KCkAAAoOBHMFAAAGbxYAAAYqSisHAgNvFwAABgNvEgAABi3xKgYqOgIoKgAACgIDfQgAAAQqOgIo
KgAACgIDfQkAAAQqlgJ7CQAABG8rAAAKcpEAAHBvLAAACigtAAAKby4AAAqlIAAAASqGAnsJAAAE
bysAAApykQAAcG8sAAAKA4wgAAABby8AAAoqlgJ7CQAABG8rAAAKcqkAAHBvLAAACigtAAAKby4A
AAp0HwAAASpyAnsJAAAEbysAAApyqQAAcG8sAAAKA28vAAAKKpYCewkAAARvKwAACnLDAABwbywA
AAooLQAACm8uAAAKpSEAAAEqhgJ7CQAABG8rAAAKcsMAAHBvLAAACgOMIQAAAW8vAAAKKpYCewkA
AARvKwAACnLZAABwbywAAAooLQAACm8uAAAKpQ4AAAEqhgJ7CQAABG8rAAAKctkAAHBvLAAACgOM
DgAAAW8vAAAKKh4CKCoAAAoqrn4KAAAELR5y8QAAcNAHAAACKDAAAApvMQAACnMyAAAKgAoAAAR+
CgAABCoafgsAAAQqHgKACwAABCoafgwAAAQqHgIoMwAACioucycAAAaADAAABCoAAEJTSkIBAAEA
AAAAAAwAAAB2NC4wLjMwMzE5AAAAAAUAbAAAAOgHAAAjfgAAVAgAADgJAAAjU3RyaW5ncwAAAACM
EQAAZAEAACNVUwDwEgAAEAAAACNHVUlEAAAAABMAADwCAAAjQmxvYgAAAAAAAAACAAABVxWiAQkB
AAAA+gEzABYAAAEAAAApAAAACAAAAAwAAAAoAAAAEQAAADMAAAAQAAAAAgAAAAQAAAATAAAAGAAA
AAEAAAAGAAAAAQAAAAAAZwQBAAAAAAAGAA0D/AYGAKED/AYGAFkC6QYPAHAHAAAGAIYCbwUGAPAC
bwUGANECbwUGAIgDbwUGAC0DbwUGAEYDbwUGAJ0CbwUGALgC7wMKAGEDWgEGAEgBFwUGAIEFFwUK
AGAGWgEOAFEGWgEKAKgFWgEGABsEFwUKAFYIWgEGAA0IFwUGADwC6QYGAHEGHAcGAJwFWgUSAAwC
UQQSAG0CUQQSALIBRQUGACEC/AYGAIMIFwUWAAEAqQYGAAwEFwUGAIIAFwUGAAcBFwUGAIsFFwUa
ACoAgQYaABoAgQZTANQIAAAaADsAgQYGAIUBFwUGAA4BFwUGACcJbwUAAAAAiAAAAAAAAQABAAEA
EAAqBQAAEAABAAEAAQAQAEQGAABBAAYABQABABAAOAgAAFEABgAUAAEAEAD6BwAAVQAIABgAAQAQ
ALsHAABVAAkAGQAAABAAIwd/B1UACgAiAAABEADqB38HbQAMACYABgCxAOAABgBBBOMABgA2BkQA
BgD7AVUABgATBOYABgD6B+kABgC7B+0AAQBGCPEAAQBGCPEAEQAeBfUAEQCiAfkAEQDpAP0AUCAA
AAAAxgC/AwYAAQBYIAAAAADGAMoDBgABAAwhAAAAAMYABAkBAQEAOCIAAAAAhhjcBgYAAgBWIgAA
AACGGNwGWQACAGEiAAAAAIYIUQEvAAUAdiIAAAAAhgimBIYABQB/IgAAAACGCAcGLwAFAJQiAAAA
AIYI+gSGAAUAnSIAAAAAhggjBAcBBQCyIgAAAACGCOQEhgAFALsiAAAAAIYIewEvAAUA0CIAAAAA
hgi2BIYABQDZIgAAAACGCMoBDAEFAO4iAAAAAIYIzASGAAUA9yIAAAAAhgiRABEBBQAMIwAAAACG
CI8EhgAFABUjAAAAAIYAGwmGAAUAHSMAAAAAhgAUCIYABQAlIwAAAACGGNwGBgAFAEUjAAAAAMYA
swgVAQUAaiMAAAAAxgGsCAEBCQB9IwAAAADGAQQJAQEKAH8jAAAAAIYY3AYfAQsAjiMAAAAAhhjc
Bh8BDACdIwAAAACGCJEAEQENAMMjAAAAAIYIoQABAA0A5SMAAAAAhggUBi8ADgALJAAAAACGCCUG
EAAOACgkAAAAAIYIIwQlAQ8ATiQAAAAAhggyBCkBDwBwJAAAAACGCNsBDAEQAJYkAAAAAIYI6wEu
ARAAuCQAAAAAgxjcBgYAEQDAJAAAAACTCG0GNAERAOwkAAAAAJMIigE5AREA8yQAAAAAkwiWAT4B
EQD7JAAAAACWCCwIRAESAAIlAAAAAIYY3AYGABIACiUAAAAAkRjiBkkBEgAAAAEAHwkAAAEAZgYA
AAIAxQcAAAMAtgUAAAEAwgAAAAIAOwEAAAMAZgYAAAQAtgUAAAEAZgYAAAEAHwkAAAEAXAgAAAEA
XAgAAAEA6QMAAAEA6QMAAAEA6QMAAAEA6QMAAAEA6QMJANwGAQARANwGBgAZANwGCgApANwGEAAx
ANwGEAA5ANwGEABBANwGEABJANwGEABRANwGEABZANwGEABhANwGEABpANwGBgCxANwGBgDRANwG
FQDhANwGBgChAL8DBgChAMoDBgDpAHcAIADpAAUBJQChAMoAKgB5APkALwDxANIGMwD5ADAJRACZ
ACAIRwD5AAYITQDxADIBLwDxADUFMwBxAOADVQCBANwGWQCBAGYGYwCBAMUHZwCJAAkEawCBAAcF
cACJABgEdQCJAEUBewCJAH8AgQCBABsJhgCBABQIhgChANwGBgD5APMHigChANkHkgCpANwGBgCh
AK4HmAAZAQ4FngChAO8IpQAhAcAIqwAhAdYDsgA5ASABtwA5ASMJwAC5ANwGxgDZANwGBgAuAAsA
dgEuABMAfwEuABsAngEuACMApwEuACsA0AEuADMA0AEuADsA0AEuAEMApwEuAEsA1gEuAFMA0AEu
AFsA7QFDAGMANwLjAGsANwKBAXsANwIpAnMAngFJAnMAngEbAD4AAwABAAYADQAHABEACAATAAAA
dgFNAQAAqgRRAQAAOwZNAQAA/gRRAQAARgRVAQAA6ARRAQAAfwFNAQAAugRRAQAAzgFaAQAA0ARR
AQAAtgBfAQAAkwRRAQAAtgBfAQAAKQZNAQAARgRjAQAAAAJaAQAAcQZnAQAAqgFsAQAAMAhxAQIA
BgADAAIABwAFAAIACAAHAAIACQAJAAIACgALAAIACwANAAIADAAPAAIADQARAAIADgATAAIADwAV
AAIAEAAXAAIAEQAZAAIAGgAbAAEAGwAbAAIAHAAdAAEAHQAdAAIAHgAfAAEAHwAfAAIAIAAhAAEA
IQAhAAIAIwAjAAIAJAAlAAEAJQAlAAIAJgAnAASAAAABAAAAAAAAAAAAAAAAAFMAAAAEAAAAAAAA
AAAAAADOAOAAAAAAAA4AAAAAAAAAAAAAANcAZggAAAAADgAAAAAAAAAAAAAA1wCLCAAAAAAEAAAA
AAAAAAAAAADOABcFAAAAAA4AAAAAAAAAAAAAANcA4wUAAAAADgAAAAAAAAAAAAAA1wDABQAAAAAA
AAAAAQAAAC0HAAAAAAAAAElEVFNDb21wb25lbnRNZXRhRGF0YTEwMABJRFRTVmFyaWFibGUxMDAA
SURUU1ZhcmlhYmxlczEwMABJRFRTRXZhbHVhdG9yQ29udGV4dDEwMABTQ19lOWRkNjE2MDVlYWM0
ZDkxYjYyYzY2NTk5N2UwNmFjMQBUb0ludDMyAEdldEludDMyADxNb2R1bGU+AGdldF9CYW5rQmF0
Y2hJRABzZXRfQmFua0JhdGNoSUQAbG9jYWxCYW5rQmF0Y2hJRABJbnB1dElEAGdldF9Db21wb25l
bnRNZXRhRGF0YQBtc2NvcmxpYgBkZWZhdWx0SW5zdGFuY2UAZ2V0X01lc3NhZ2UAVG9Eb3VibGUA
UnVudGltZVR5cGVIYW5kbGUAR2V0VHlwZUZyb21IYW5kbGUAZ2V0X05hbWUASW5wdXROYW1lAEdl
dERhdGVUaW1lAGdldF9saW5lAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlBpcGVsaW5lAGdldF9J
bXBvcnRUeXBlAGdldF9DdWx0dXJlAHNldF9DdWx0dXJlAHJlc291cmNlQ3VsdHVyZQBBcHBsaWNh
dGlvblNldHRpbmdzQmFzZQBnZXRfRGVwb3NpdGVEYXRlAGdldF9EZXBvc2l0RGF0ZQBzZXRfRGVw
b3NpdERhdGUAbG9jYWxEZXBvc2l0RGF0ZQBFZGl0b3JCcm93c2FibGVTdGF0ZQBDb21waWxlckdl
bmVyYXRlZEF0dHJpYnV0ZQBEZWJ1Z2dlck5vblVzZXJDb2RlQXR0cmlidXRlAERlYnVnZ2FibGVB
dHRyaWJ1dGUARWRpdG9yQnJvd3NhYmxlQXR0cmlidXRlAEFzc2VtYmx5VGl0bGVBdHRyaWJ1dGUA
QXNzZW1ibHlUcmFkZW1hcmtBdHRyaWJ1dGUAVGFyZ2V0RnJhbWV3b3JrQXR0cmlidXRlAEFzc2Vt
Ymx5Q29uZmlndXJhdGlvbkF0dHJpYnV0ZQBBc3NlbWJseURlc2NyaXB0aW9uQXR0cmlidXRlAENv
bXBpbGF0aW9uUmVsYXhhdGlvbnNBdHRyaWJ1dGUAQXNzZW1ibHlQcm9kdWN0QXR0cmlidXRlAEFz
c2VtYmx5Q29weXJpZ2h0QXR0cmlidXRlAFNTSVNTY3JpcHRDb21wb25lbnRFbnRyeVBvaW50QXR0
cmlidXRlAEFzc2VtYmx5Q29tcGFueUF0dHJpYnV0ZQBSdW50aW1lQ29tcGF0aWJpbGl0eUF0dHJp
YnV0ZQBQcmVFeGVjdXRlAFBvc3RFeGVjdXRlAHNldF9WYWx1ZQBNaW5WYWx1ZQB2YWx1ZQBTeXN0
ZW0uUnVudGltZS5WZXJzaW9uaW5nAEdldFN0cmluZwBiVmFsAEdldERlY2ltYWwAZ2V0X0JhdGNo
VG90YWwAc2V0X0JhdGNoVG90YWwAbG9jYWxCYXRjaFRvdGFsAFN5c3RlbS5Db21wb25lbnRNb2Rl
bABTQ19lOWRkNjE2MDVlYWM0ZDkxYjYyYzY2NTk5N2UwNmFjMS5kbGwAZ2V0X0JhbmtCYXRjaElE
X0lzTnVsbABnZXRfbGluZV9Jc051bGwAZ2V0X0ltcG9ydFR5cGVfSXNOdWxsAGdldF9EZXBvc2l0
ZURhdGVfSXNOdWxsAGdldF9CYXRjaFRvdGFsX0lzTnVsbABnZXRfQmF0Y2hOYnJfSXNOdWxsAGdl
dF9JdGVtAFN5c3RlbQByZXNvdXJjZU1hbgBTY3JpcHRNYWluAEZpcmVJbmZvcm1hdGlvbgBTeXN0
ZW0uQ29uZmlndXJhdGlvbgBTeXN0ZW0uR2xvYmFsaXphdGlvbgBTeXN0ZW0uUmVmbGVjdGlvbgBF
eGNlcHRpb24AU3RyaW5nQ29tcGFyaXNvbgBDdWx0dXJlSW5mbwBPdXRwdXROYW1lTWFwAE91dHB1
dE1hcABNaWNyb3NvZnQuU3FsU2VydmVyLkRUU1J1bnRpbWVXcmFwAE1pY3Jvc29mdC5TcWxTZXJ2
ZXIuRFRTUGlwZWxpbmVXcmFwAGdldF9CYXRjaE5icgBnZXRfQmFua0JhdGNoTmJyAHNldF9CYW5r
QmF0Y2hOYnIAbG9jYWxCYXRjaE5icgBJbnB1dDBCdWZmZXIAUGlwZWxpbmVCdWZmZXIAU2NyaXB0
QnVmZmVyAGdldF9SZXNvdXJjZU1hbmFnZXIATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuUnVudGlt
ZS5XcmFwcGVyAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlBpcGVsaW5lLldyYXBwZXIARmlyZUVy
cm9yAC5jdG9yAC5jY3RvcgBTeXN0ZW0uRGlhZ25vc3RpY3MAU3lzdGVtLlJ1bnRpbWUuQ29tcGls
ZXJTZXJ2aWNlcwBTeXN0ZW0uUmVzb3VyY2VzAFNDX2U5ZGQ2MTYwNWVhYzRkOTFiNjJjNjY1OTk3
ZTA2YWMxLlByb3BlcnRpZXMuUmVzb3VyY2VzLnJlc291cmNlcwBEZWJ1Z2dpbmdNb2RlcwBTQ19l
OWRkNjE2MDVlYWM0ZDkxYjYyYzY2NTk5N2UwNmFjMS5Qcm9wZXJ0aWVzAGdldF9SZWFkV3JpdGVW
YXJpYWJsZXMAQnVmZmVyQ29sdW1uSW5kZXhlcwBHZXRDb2x1bW5JbmRleGVzAFNldHRpbmdzAEVx
dWFscwBDb25uZWN0aW9ucwBGb3JtYXQAT2JqZWN0AEVuZE9mUm93c2V0AG9wX0V4cGxpY2l0AGdl
dF9EZWZhdWx0AFVzZXJDb21wb25lbnQAUGFyZW50Q29tcG9uZW50AFNjcmlwdENvbXBvbmVudABN
aWNyb3NvZnQuU3FsU2VydmVyLlR4U2NyaXB0AENvbnZlcnQATWljcm9zb2Z0LlNxbFNlcnZlci5Q
aXBlbGluZUhvc3QASW5wdXQwX1Byb2Nlc3NJbnB1dABHZXRWYWx1ZVdpdGhDb250ZXh0AFNjcmlw
dENvbXBvbmVudEV2YWxDb250ZXh0AGdldF9FdmFsdWF0b3JDb250ZXh0AElucHV0MF9Qcm9jZXNz
SW5wdXRSb3cATmV4dFJvdwBnZXRfQXNzZW1ibHkARW1wdHkAAAAAAQB9VgBhAHIAaQBhAGIAbABl
AHMAOgAgAEIAYQBuAGsAQgBhAHQAYwBoAEkARAAgAD0AIAB7ADAAfQAsACAAQgBhAHQAYwBoAFQA
bwB0AGEAbAAgAD0AIAB7ADEAfQAsACAAQgBhAHQAYwBoAE4AYgByACAAPQAgAHsAMgB9AAAPSQBu
AHAAdQB0ACAAMAAAF0IAYQBuAGsAQgBhAHQAYwBoAEkARAAAGUIAYQBuAGsAQgBhAHQAYwBoAE4A
YgByAAAVQgBhAHQAYwBoAFQAbwB0AGEAbAAAF0QAZQBwAG8AcwBpAHQARABhAHQAZQAAcVMAQwBf
AGUAOQBkAGQANgAxADYAMAA1AGUAYQBjADQAZAA5ADEAYgA2ADIAYwA2ADYANQA5ADkANwBlADAA
NgBhAGMAMQAuAFAAcgBvAHAAZQByAHQAaQBlAHMALgBSAGUAcwBvAHUAcgBjAGUAcwAAAE953bWo
fANNtYs4d1ljqLMABCABAQgDIAABBSABARERBCABAQ4FIAEBEWUEBwESPQQAAQgIBAABDQgEIAAS
eQMgAA4KIAYBCA4ODggQAgUHAg4SPQIGDgUAAQ0RTQcABA4OHBwcAwYROQkgAwESRR0IEkkDBhJF
AwYdCAQgAQ4IBCABAggFIAERTQgFIAEROQgEIAEICAMgAAIHIAICDhGAiQUgAR0ICAUgABKAjQYg
ARKAkRwFAAASgJUGIAEcEoCZBCABARwIAAESgJ0RgKEFIAASgKUHIAIBDhKApQi3elxWGTTgiQiJ
hF3NgIDMkQIGCAIGDQIGAgMGEhQDBhIYAwYSUQMGEl0DBhJhAwYSIAUgAQESDAQgABFNBCAAETkD
IAAICSAEAQgOEkUSSQUgAQESUQMgAA0EIAEBDQUgAQEROQQAABJdBAAAEmEFAAEBEmEEAAASIAMA
AAEDKAAOAygAAgQoABFNBCgAETkDKAAIAygADQQIABJdBAgAEmEECAASIAgBAAgAAAAAAB4BAAEA
VAIWV3JhcE5vbkV4Y2VwdGlvblRocm93cwEIAQACAAAAAAAoAQAjU0NfZTlkZDYxNjA1ZWFjNGQ5
MWI2MmM2NjU5OTdlMDZhYzEAAAUBAAAAABYBABFDb3B5cmlnaHQgQCAgMjAxOQAASQEAGi5ORVRG
cmFtZXdvcmssVmVyc2lvbj12NC41AQBUDhRGcmFtZXdvcmtEaXNwbGF5TmFtZRIuTkVUIEZyYW1l
d29yayA0LjUEAQAAALQAAADOyu++AQAAAJEAAABsU3lzdGVtLlJlc291cmNlcy5SZXNvdXJjZVJl
YWRlciwgbXNjb3JsaWIsIFZlcnNpb249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNL
ZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5I1N5c3RlbS5SZXNvdXJjZXMuUnVudGltZVJlc291cmNl
U2V0AgAAAAAAAAAAAAAAUEFEUEFEULQAAAA0OwAAAAAAAAAAAABOOwAAACAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAQDsAAAAAAAAAAAAAAABfQ29yRGxsTWFpbgBtc2NvcmVlLmRsbAAAAAAA/yUAIAAQ
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB
ABAAAAAYAACAAAAAAAAAAAAAAAAAAAABAAEAAAAwAACAAAAAAAAAAAAAAAAAAAABAAAAAABIAAAA
WEAAAOwDAAAAAAAAAAAAAOwDNAAAAFYAUwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBPAAAAAAC9
BO/+AAABAAAAAQAAAAAAAAABAAAAAAA/AAAAAAAAAAQAAAACAAAAAAAAAAAAAAAAAAAARAAAAAEA
VgBhAHIARgBpAGwAZQBJAG4AZgBvAAAAAAAkAAQAAABUAHIAYQBuAHMAbABhAHQAaQBvAG4AAAAA
AAAAsARMAwAAAQBTAHQAcgBpAG4AZwBGAGkAbABlAEkAbgBmAG8AAAAoAwAAAQAwADAAMAAwADAA
NABiADAAAAAaAAEAAQBDAG8AbQBtAGUAbgB0AHMAAAAAAAAAIgABAAEAQwBvAG0AcABhAG4AeQBO
AGEAbQBlAAAAAAAAAAAAcAAkAAEARgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4AAAAAAFMA
QwBfAGUAOQBkAGQANgAxADYAMAA1AGUAYQBjADQAZAA5ADEAYgA2ADIAYwA2ADYANQA5ADkANwBl
ADAANgBhAGMAMQAAADAACAABAEYAaQBsAGUAVgBlAHIAcwBpAG8AbgAAAAAAMQAuADAALgAwAC4A
MAAAAHAAKAABAEkAbgB0AGUAcgBuAGEAbABOAGEAbQBlAAAAUwBDAF8AZQA5AGQAZAA2ADEANgAw
ADUAZQBhAGMANABkADkAMQBiADYAMgBjADYANgA1ADkAOQA3AGUAMAA2AGEAYwAxAC4AZABsAGwA
AABIABIAAQBMAGUAZwBhAGwAQwBvAHAAeQByAGkAZwBoAHQAAABDAG8AcAB5AHIAaQBnAGgAdAAg
AEAAIAAgADIAMAAxADkAAAAqAAEAAQBMAGUAZwBhAGwAVAByAGEAZABlAG0AYQByAGsAcwAAAAAA
AAAAAHgAKAABAE8AcgBpAGcAaQBuAGEAbABGAGkAbABlAG4AYQBtAGUAAABTAEMAXwBlADkAZABk
ADYAMQA2ADAANQBlAGEAYwA0AGQAOQAxAGIANgAyAGMANgA2ADUAOQA5ADcAZQAwADYAYQBjADEA
LgBkAGwAbAAAAGgAJAABAFAAcgBvAGQAdQBjAHQATgBhAG0AZQAAAAAAUwBDAF8AZQA5AGQAZAA2
ADEANgAwADUAZQBhAGMANABkADkAMQBiADYAMgBjADYANgA1ADkAOQA3AGUAMAA2AGEAYwAxAAAA
NAAIAAEAUAByAG8AZAB1AGMAdABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgAwAC4AMAAAADgACAAB
AEEAcwBzAGUAbQBiAGwAeQAgAFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADAALgAwAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAwAAABgOwAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=]]></arrayElement>
                      </arrayElements>
                    </property>
                    <property
                      dataType="System.String"
                      description="Specifies the name of the Microsoft Visual Studio Tools for Applications project. Project names must be unique within a package."
                      name="VSTAProjectName"
                      typeConverter="NOTBROWSABLE">SC_e9dd61605eac4d91b62c665997e06ac1</property>
                    <property
                      dataType="System.String"
                      description="Specifies the programming language used by the script."
                      name="ScriptLanguage"
                      typeConverter="Microsoft.SqlServer.VSTAHosting.ScriptingLanguages">CSharp</property>
                    <property
                      dataType="System.String"
                      description="Specifies a comma-separated list of read-only variables."
                      name="ReadOnlyVariables"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIVariablePickerDlg"></property>
                    <property
                      dataType="System.String"
                      description="Specifies a comma-separated list of read/write variables."
                      name="ReadWriteVariables"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIWriteableVariablePickerDlg">User::BankBatchID,User::BankBatchNbr,User::BatchTotal,User::DepositDate</property>
                    <property
                      dataType="System.String"
                      description="List of breakpoints present on the script."
                      isArray="true"
                      name="BreakpointCollection"
                      typeConverter="NOTBROWSABLE">
                      <arrayElements
                        arrayElementCount="0" />
                    </property>
                    <property
                      dataType="System.String"
                      description="Checksum to match component metedata against compiled codes."
                      name="MetadataChecksum140"
                      typeConverter="NOTBROWSABLE">AB</property>
                    <property
                      dataType="System.String"
                      name="UserComponentTypeName">Microsoft.ScriptComponentHost</property>
                  </properties>
                  <inputs>
                    <input
                      refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Script Component to Store Variables.Inputs[Input 0]"
                      hasSideEffects="true"
                      name="Input 0">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Script Component to Store Variables.Inputs[Input 0].Columns[line]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="80"
                          cachedName="line"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Flat File LockBox.Outputs[Flat File Source Output].Columns[line]" />
                        <inputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Script Component to Store Variables.Inputs[Input 0].Columns[BatchNbr]"
                          cachedDataType="wstr"
                          cachedLength="12"
                          cachedName="BatchNbr"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Derived Columns from Header.Outputs[Derived Column Output].Columns[BatchNbr]" />
                        <inputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Script Component to Store Variables.Inputs[Input 0].Columns[BatchTotal]"
                          cachedDataType="cy"
                          cachedName="BatchTotal"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Derived Columns from Header.Outputs[Derived Column Output].Columns[BatchTotal]" />
                        <inputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Script Component to Store Variables.Inputs[Input 0].Columns[ImportType]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="10"
                          cachedName="ImportType"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Derived Columns from Header.Outputs[Derived Column Output].Columns[ImportType]" />
                        <inputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Script Component to Store Variables.Inputs[Input 0].Columns[DepositeDate]"
                          cachedDataType="date"
                          cachedName="DepositeDate"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Derived Columns from Header.Outputs[Derived Column Output].Columns[DepositeDate]" />
                        <inputColumn
                          refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Script Component to Store Variables.Inputs[Input 0].Columns[BankBatchID]"
                          cachedDataType="i4"
                          cachedName="BankBatchID"
                          lineageId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Lookup batchID.Outputs[Lookup Match Output].Columns[BankBatchID]" />
                      </inputColumns>
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Script Component to Store Variables.Outputs[Output 0]"
                      name="Output 0"
                      synchronousInputId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Script Component to Store Variables.Inputs[Input 0]">
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
              </components>
              <paths>
                <path
                  refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info.Paths[Character Map Output]"
                  endId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Conditional Split.Inputs[Conditional Split Input]"
                  name="Character Map Output"
                  startId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Character Map.Outputs[Character Map Output]" />
                <path
                  refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info.Paths[Check]"
                  endId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Record Check Count.Inputs[Row Count Input 1]"
                  name="Check"
                  startId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Conditional Split.Outputs[Check]" />
                <path
                  refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info.Paths[Derived Column Error Output]"
                  endId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Script Component to get the Error Desc.Inputs[Input 0]"
                  name="Derived Column Error Output"
                  startId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Derived Columns from Header.Outputs[Derived Column Error Output]" />
                <path
                  refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info.Paths[Derived Column Output]"
                  endId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\OLE DB Destination Error Log.Inputs[OLE DB Destination Input]"
                  name="Derived Column Output"
                  startId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Derived Column System Variables.Outputs[Derived Column Output]" />
                <path
                  refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info.Paths[Derived Column Output1]"
                  endId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Lookup batchID.Inputs[Lookup Input]"
                  name="Derived Column Output"
                  startId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Derived Columns from Header.Outputs[Derived Column Output]" />
                <path
                  refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info.Paths[Flat File Source Output]"
                  endId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Character Map.Inputs[Character Map Input]"
                  name="Flat File Source Output"
                  startId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Flat File LockBox.Outputs[Flat File Source Output]" />
                <path
                  refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info.Paths[Header]"
                  endId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Derived Columns from Header.Inputs[Derived Column Input]"
                  name="Header"
                  startId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Conditional Split.Outputs[Header]" />
                <path
                  refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info.Paths[Lookup Match Output]"
                  endId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Script Component to Store Variables.Inputs[Input 0]"
                  name="Lookup Match Output"
                  startId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Lookup batchID.Outputs[Lookup Match Output]" />
                <path
                  refId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info.Paths[Output 0]"
                  endId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Derived Column System Variables.Inputs[Derived Column Input]"
                  name="Output 0"
                  startId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Script Component to get the Error Desc.Outputs[Output 0]" />
              </paths>
            </pipeline>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Foreach LockBox Loop Container\Execute SQL Task to add bank batch Hdr"
          DTS:CreationName="Microsoft.ExecuteSQLTask"
          DTS:Description="Execute SQL Task"
          DTS:Disabled="True"
          DTS:DTSID="{661462E2-75AA-4B63-ACF0-A0B00D1A98AA}"
          DTS:ExecutableType="Microsoft.ExecuteSQLTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Execute SQL Task to add bank batch Hdr"
          DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2017; © 2017 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{4640E420-BCC4-43C2-B694-EBB06412AE87}"
              SQLTask:SqlStatementSource="exec [dbo].[usp_BankBatch_Add] ? output,?,?,?,?,?,?,?,?" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="0"
                SQLTask:DtsVariableName="User::BankBatchID"
                SQLTask:ParameterDirection="Output"
                SQLTask:DataType="3"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="1"
                SQLTask:DtsVariableName="User::BankBatchNbr"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="130"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="2"
                SQLTask:DtsVariableName="User::DepositDate"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="7"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="3"
                SQLTask:DtsVariableName="System::ContainerStartTime"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="7"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="4"
                SQLTask:DtsVariableName="User::BatchTotal"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="5"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="5"
                SQLTask:DtsVariableName="User::BatchItems"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="3"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="6"
                SQLTask:DtsVariableName="User::FileBytes"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="3"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="7"
                SQLTask:DtsVariableName="User::LBCurrentFile"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="130"
                SQLTask:ParameterSize="-1" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="8"
                SQLTask:DtsVariableName="User::LBImportType"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="130"
                SQLTask:ParameterSize="-1" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Foreach LockBox Loop Container\File System Task Processed Folder"
          DTS:CreationName="Microsoft.FileSystemTask"
          DTS:Description="File System Task"
          DTS:DTSID="{6A5A7B51-3A2C-4ACB-9B57-09ACA4CFFCB1}"
          DTS:ExecutableType="Microsoft.FileSystemTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="File System Task Processed Folder"
          DTS:TaskContact="File System Task;Microsoft Corporation; SQL Server 2017; © 2017 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <FileSystemData
              TaskOperationType="RenameFile"
              TaskOverwriteDestFile="True"
              TaskSourcePath="User::LBCurrentFile"
              TaskIsSourceVariable="True"
              TaskDestinationPath="User::LBProcessedFile"
              TaskIsDestinationVariable="True" />
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Foreach LockBox Loop Container\File System Task to Error Folder"
          DTS:CreationName="Microsoft.FileSystemTask"
          DTS:Description="File System Task"
          DTS:DTSID="{5DB380C1-AD67-46DC-847B-A1C4F84E325E}"
          DTS:ExecutableType="Microsoft.FileSystemTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="File System Task to Error Folder"
          DTS:TaskContact="File System Task;Microsoft Corporation; SQL Server 2017; © 2017 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="1">
          <DTS:Variables />
          <DTS:ObjectData>
            <FileSystemData
              TaskOperationType="RenameFile"
              TaskOverwriteDestFile="True"
              TaskSourcePath="User::LBCurrentFile"
              TaskIsSourceVariable="True"
              TaskDestinationPath="User::LBErrorFile"
              TaskIsDestinationVariable="True" />
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Foreach LockBox Loop Container\Script  LB File Size into Variable"
          DTS:CreationName="Microsoft.ScriptTask"
          DTS:Description="Script Task"
          DTS:DTSID="{FF95DFAA-61A8-47CD-A557-61FDE6C74CF9}"
          DTS:ExecutableType="Microsoft.ScriptTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Script  LB File Size into Variable"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <ScriptProject
              Name="ST_fc5ba97da0dc47dfab1a8c8dca5629d5"
              VSTAMajorVersion="15"
              VSTAMinorVersion="0"
              Language="CSharp"
              ReadOnlyVariables="User::LBCurrentFile"
              ReadWriteVariables="User::BankBatchID,User::BankBatchNbr,User::BatchItems,User::BatchTotal,User::DepositDate,User::FileBytes">
              <ProjectItem
                Name="Properties\Settings.settings"
                Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.resx"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
              <ProjectItem
                Name="ST_fc5ba97da0dc47dfab1a8c8dca5629d5.csproj"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{b3fbf818-36c3-40f1-96b5-c8218d5e9177}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_fc5ba97da0dc47dfab1a8c8dca5629d5</RootNamespace>
    <AssemblyName>ST_fc5ba97da0dc47dfab1a8c8dca5629d5</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>

  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>

  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
         <Generator>ResXFileCodeGenerator</Generator>
         <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
             <AutoGen>True</AutoGen>
         <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
         <Generator>SettingsSingleFileGenerator</Generator>
         <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
         <AutoGen>True</AutoGen>
         <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
         <SubType>Code</SubType>
    </Compile>
  </ItemGroup>

  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />

  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="ScriptTask"
                           HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}"
                           ApplicationType="usd"
                           Language="cs"
                           TemplatesPath=""
                           DebugInfoCommandLine=""
                           DebugInfoWorkingDir=""
                           IconImageList=""/>
        <Host Name="ScriptTask" GeneratedNamespace="$safeprojectname" IconIndex="">
        </Host>
        <ProjectClient>
            <HostIdentifier>SSIS_ST130</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
              <ProjectItem
                Name="ScriptMain.cs"
                Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.IO;
#endregion

namespace ST_fc5ba97da0dc47dfab1a8c8dca5629d5
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


		/// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
		public void Main()
		{
            // TODO: Add your code here
            Int64 lDefault = 0;
            Boolean bVal= false;

            try
            {
                ResetVariables();

                FileInfo oFile = new FileInfo(Dts.Variables["LBCurrentFile"].Value.ToString());
                Dts.Variables["FileBytes"].Value = oFile.Length;
                Dts.Events.FireInformation(0, "Script Task to Vars", "File Bytes Found: " + Dts.Variables["FileBytes"].Value.ToString(), "", 0, ref bVal);

                Dts.TaskResult = (int)ScriptResults.Success;
            }
            catch (Exception ex)
            {
                Dts.Events.FireError(0, "Script Task to Vars", ex.ToString(), "", 0);
                Dts.Variables["FileBytes"].Value = lDefault;
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
		}

        public void ResetVariables()
        {
            //Reset variables
            Dts.Variables["BankBatchID"].Value = System.Convert.ToInt32(0);
            Dts.Variables["BankBatchNbr"].Value = "";
            Dts.Variables["BatchItems"].Value = System.Convert.ToInt64(0);
            Dts.Variables["BatchTotal"].Value = System.Convert.ToDouble(0);
            Dts.Variables["DepositDate"].Value = DateTime.MinValue;
            Dts.Variables["FileBytes"].Value = System.Convert.ToInt64(0);
        }

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
              <ProjectItem
                Name="Project"
                Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:Language>msBuild</msb:Language>
		<msb:CodeName>ST_fc5ba97da0dc47dfab1a8c8dca5629d5</msb:CodeName>
		<msb:DisplayName>ST_fc5ba97da0dc47dfab1a8c8dca5629d5</msb:DisplayName>
		<msb:ProjectId>{6284AC6B-9C22-446A-A1D4-12A55E9A7CC6}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_fc5ba97da0dc47dfab1a8c8dca5629d5.csproj"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ScriptMain.cs"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_fc5ba97da0dc47dfab1a8c8dca5629d5.Properties.Settings.get_Default():ST_fc5ba97da0dc47dfab1a8c8dca5629d5.Properties.Sett" +
    "ings")]

namespace ST_fc5ba97da0dc47dfab1a8c8dca5629d5.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="Properties\AssemblyInfo.cs"
                Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_fc5ba97da0dc47dfab1a8c8dca5629d5")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_fc5ba97da0dc47dfab1a8c8dca5629d5")]
[assembly: AssemblyCopyright("Copyright @  2019")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_fc5ba97da0dc47dfab1a8c8dca5629d5.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_fc5ba97da0dc47dfab1a8c8dca5629d5.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_fc5ba97da0dc47dfab1a8c8dca5629d5.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_fc5ba97da0dc47dfab1a8c8dca5629d5.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_fc5ba97da0dc47dfab1a8c8dca5629d5.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
              <BinaryItem
                Name="ST_fc5ba97da0dc47dfab1a8c8dca5629d5.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAC6wJV0AAAAAAAAAAOAAIiALATAAABIAAAAIAAAAAAAApjEA
AAAgAAAAQAAAAAAAEAAgAAAAAgAABAAAAAAAAAAGAAAAAAAAAACAAAAAAgAAAAAAAAMAYIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAFQxAABPAAAAAEAAAHgEAAAAAAAAAAAAAAAAAAAA
AAAAAGAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAArBEAAAAgAAAAEgAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAHgEAAAAQAAAAAYAAAAUAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAGAAAAACAAAAGgAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAACI
MQAAAAAAAEgAAAACAAUAuCIAAOQNAAABAAAAAAAAAJwwAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAABswBwD9AAAAAQAAERZqChYLAigCAAAGAigQAAAKbxEAAApy
AQAAcG8SAAAKbxMAAApvFAAACnMVAAAKDAIoEAAACm8RAAAKch0AAHBvEgAACghvFgAACowdAAAB
bxcAAAoCKBAAAApvGAAAChZyMQAAcHJZAABwAigQAAAKbxEAAApyHQAAcG8SAAAKbxMAAApvFAAA
CigZAAAKcn8AAHAWEgFvGgAACgIoEAAAChZvGwAACt5SDQIoEAAACm8YAAAKFnIxAABwCW8UAAAK
cn8AAHAWbxwAAAomAigQAAAKbxEAAApyHQAAcG8SAAAKBowdAAABbxcAAAoCKBAAAAoXbxsAAAre
ACoAAAABEAAAAAAFAKWqAFIQAAABEzACANgAAAAAAAAAAigQAAAKbxEAAApygQAAcG8SAAAKFigd
AAAKjCEAAAFvFwAACgIoEAAACm8RAAAKcpkAAHBvEgAACnJ/AABwbxcAAAoCKBAAAApvEQAACnKz
AABwbxIAAAoWKB4AAAqMHQAAAW8XAAAKAigQAAAKbxEAAApyyQAAcG8SAAAKFigfAAAKjCIAAAFv
FwAACgIoEAAACm8RAAAKct8AAHBvEgAACn4gAAAKjCMAAAFvFwAACgIoEAAACm8RAAAKch0AAHBv
EgAAChYoHgAACowdAAABbxcAAAoqHgIoIQAACioeAigiAAAKKq5+AQAABC0ecvcAAHDQAwAAAigj
AAAKbyQAAApzJQAACoABAAAEfgEAAAQqGn4CAAAEKh4CgAIAAAQqGn4DAAAEKh4CKCYAAAoqLnMJ
AAAGgAMAAAQqAABCU0pCAQABAAAAAAAMAAAAdjQuMC4zMDMxOQAAAAAFAGwAAABEBAAAI34AALAE
AAAQBgAAI1N0cmluZ3MAAAAAwAoAAGwBAAAjVVMALAwAABAAAAAjR1VJRAAAADwMAACoAQAAI0Js
b2IAAAAAAAAAAgAAAVcdogEJAwAAAPoBMwAWAAABAAAAJgAAAAUAAAAGAAAACgAAAAEAAAAmAAAA
AgAAABAAAAABAAAAAgAAAAMAAAAEAAAAAQAAAAQAAAABAAAAAQAAAAAAvwMBAAAAAAAGAFEC0AQG
AOAC0AQGAJ0BvQQPAEQFAAAGAMoBTQQGADQCTQQGABUCTQQGAMcCTQQGAHECTQQGAIoCTQQGAOEB
TQQGAPwBIQMKAKUCbgMKABwBbgMGAGkEPgAGAF8E8AMGAPcD8AMGAIABvQQGANgF8AMGAIIE8AQG
AHIEOAQOAFABqQMOALEBqQMOADgBIwQGAGUB0AQKAJcDbgMSAJUFxwASAIgAxwAGAAsA8AMKAJIE
bgMGAD0D8AMGAPoF8AMGAAMA8AMGAJMA8AMGAL4A8AMGAOcA8AMGAJoA8AMGAAYGTQQAAAAANQAA
AAAAAQABAAEAEAAIBBEAOQABAAEAAAAQAPcEUwVNAAEABAAAARAAnwVTBWEAAwAIAAMBAAC4BQAA
RQAEAAsAEQD8A6sAEQAMAa8AEQB4ALMABgZnALcAVoCoBboAVoDsALoAUCAAAAAAhgAOBAYAAQBs
IQAAAACGAJAFBgABAFAiAAAAAIYYsAQGAAEAWCIAAAAAgxiwBAYAAQBgIgAAAACTCH4EvgABAIwi
AAAAAJMI9ADDAAEAkyIAAAAAkwgAAcgAAQCbIgAAAACWCN8FzgACAKIiAAAAAIYYsAQGAAIAqiIA
AAAAkRi2BNMAAgAAAAEAGwMJALAEAQARALAEBgAZALAECgApALAEEAAxALAEEAA5ALAEEABBALAE
EABJALAEEABRALAEEABZALAEEABhALAEEABpALAEBgCRALAEBgC5ALAEFQDJALAEBgBxALAFJADR
AIIFKQDZAOcDLgDhAP4CNACZADsDOAB5ALAEEAB5AEQDPADhAAgDQADRAMYFRQD5ANEFSgDxABME
UADRAOsFAQDxAKYEWwABAQEAZAABAQkAaQABAZEAbgAZARIDcwBxALAEBgCZALAEBgAhAawAeAAh
AQIGgQChALAEhwDBALAEBgAIABQAoQAIABgApgApAHMADgEuAAsA5gAuABMA7wAuABsADgEuACMA
FwEuACsAQAEuADMAQAEuADsAQAEuAEMAFwEuAEsARgEuAFMAQAEuAFsAXQFDAGMApgBJAHMADgFh
AHsApgBjAGsApgAbAAMAAQAEAAMAAACCBNcAAAAUAdwAAADjBeEAAgAFAAMAAgAGAAUAAQAHAAUA
AgAIAAcABIAAAAEAAADaGxd7AAAAAAAAEQAAAAQAAAAAAAAAAAAAAI8AbwAAAAAADgAAAAAAAAAA
AAAAmABPAwAAAAAEAAAAAAAAAAAAAACPAPADAAAAAA4AAAAAAAAAAAAAAJgASAAAAAAAAAAAAAEA
AAABBQAABQACAAAAAAAAVG9JbnQzMgBUb0ludDY0AFNUX2ZjNWJhOTdkYTBkYzQ3ZGZhYjFhOGM4
ZGNhNTYyOWQ1ADxNb2R1bGU+AFN5c3RlbS5JTwBNaWNyb3NvZnQuU3FsU2VydmVyLk1hbmFnZWRE
VFMAdmFsdWVfXwBtc2NvcmxpYgBkZWZhdWx0SW5zdGFuY2UAVmFyaWFibGUAVG9Eb3VibGUAUnVu
dGltZVR5cGVIYW5kbGUAR2V0VHlwZUZyb21IYW5kbGUARGF0ZVRpbWUATWljcm9zb2Z0LlNxbFNl
cnZlci5EdHMuUnVudGltZQBUeXBlAEZhaWx1cmUAZ2V0X0N1bHR1cmUAc2V0X0N1bHR1cmUAcmVz
b3VyY2VDdWx0dXJlAFZTVEFSVFNjcmlwdE9iamVjdE1vZGVsQmFzZQBBcHBsaWNhdGlvblNldHRp
bmdzQmFzZQBFZGl0b3JCcm93c2FibGVTdGF0ZQBDb21waWxlckdlbmVyYXRlZEF0dHJpYnV0ZQBE
ZWJ1Z2dlck5vblVzZXJDb2RlQXR0cmlidXRlAERlYnVnZ2FibGVBdHRyaWJ1dGUARWRpdG9yQnJv
d3NhYmxlQXR0cmlidXRlAEFzc2VtYmx5VGl0bGVBdHRyaWJ1dGUAQXNzZW1ibHlUcmFkZW1hcmtB
dHRyaWJ1dGUAVGFyZ2V0RnJhbWV3b3JrQXR0cmlidXRlAEFzc2VtYmx5Q29uZmlndXJhdGlvbkF0
dHJpYnV0ZQBBc3NlbWJseURlc2NyaXB0aW9uQXR0cmlidXRlAENvbXBpbGF0aW9uUmVsYXhhdGlv
bnNBdHRyaWJ1dGUAQXNzZW1ibHlQcm9kdWN0QXR0cmlidXRlAEFzc2VtYmx5Q29weXJpZ2h0QXR0
cmlidXRlAFNTSVNTY3JpcHRUYXNrRW50cnlQb2ludEF0dHJpYnV0ZQBBc3NlbWJseUNvbXBhbnlB
dHRyaWJ1dGUAUnVudGltZUNvbXBhdGliaWxpdHlBdHRyaWJ1dGUAZ2V0X1ZhbHVlAHNldF9WYWx1
ZQBNaW5WYWx1ZQB2YWx1ZQBTeXN0ZW0uUnVudGltZS5WZXJzaW9uaW5nAFRvU3RyaW5nAGdldF9M
ZW5ndGgATWljcm9zb2Z0LlNxbFNlcnZlci5TY3JpcHRUYXNrAE1pY3Jvc29mdC5TcWxTZXJ2ZXIu
RHRzLlRhc2tzLlNjcmlwdFRhc2sAU2NyaXB0T2JqZWN0TW9kZWwAU3lzdGVtLkNvbXBvbmVudE1v
ZGVsAFNUX2ZjNWJhOTdkYTBkYzQ3ZGZhYjFhOGM4ZGNhNTYyOWQ1LmRsbABnZXRfSXRlbQBTeXN0
ZW0ARW51bQByZXNvdXJjZU1hbgBTY3JpcHRNYWluAEZpcmVJbmZvcm1hdGlvbgBTeXN0ZW0uQ29u
ZmlndXJhdGlvbgBTeXN0ZW0uR2xvYmFsaXphdGlvbgBTeXN0ZW0uUmVmbGVjdGlvbgBFeGNlcHRp
b24ARmlsZUluZm8AQ3VsdHVyZUluZm8AZ2V0X1Jlc291cmNlTWFuYWdlcgBFdmVudHNPYmplY3RX
cmFwcGVyAEZpcmVFcnJvcgAuY3RvcgAuY2N0b3IAU3lzdGVtLkRpYWdub3N0aWNzAFN5c3RlbS5S
dW50aW1lLkNvbXBpbGVyU2VydmljZXMAU3lzdGVtLlJlc291cmNlcwBTVF9mYzViYTk3ZGEwZGM0
N2RmYWIxYThjOGRjYTU2MjlkNS5Qcm9wZXJ0aWVzLlJlc291cmNlcy5yZXNvdXJjZXMARGVidWdn
aW5nTW9kZXMAU1RfZmM1YmE5N2RhMGRjNDdkZmFiMWE4YzhkY2E1NjI5ZDUuUHJvcGVydGllcwBn
ZXRfVmFyaWFibGVzAFJlc2V0VmFyaWFibGVzAFNldHRpbmdzAFN1Y2Nlc3MAZ2V0X0R0cwBTY3Jp
cHRSZXN1bHRzAGdldF9FdmVudHMAQ29uY2F0AE9iamVjdABnZXRfRGVmYXVsdABzZXRfVGFza1Jl
c3VsdABDb252ZXJ0AGdldF9Bc3NlbWJseQAAABtMAEIAQwB1AHIAcgBlAG4AdABGAGkAbABlAAAT
RgBpAGwAZQBCAHkAdABlAHMAACdTAGMAcgBpAHAAdAAgAFQAYQBzAGsAIAB0AG8AIABWAGEAcgBz
AAAlRgBpAGwAZQAgAEIAeQB0AGUAcwAgAEYAbwB1AG4AZAA6ACAAAAEAF0IAYQBuAGsAQgBhAHQA
YwBoAEkARAAAGUIAYQBuAGsAQgBhAHQAYwBoAE4AYgByAAAVQgBhAHQAYwBoAEkAdABlAG0AcwAA
FUIAYQB0AGMAaABUAG8AdABhAGwAABdEAGUAcABvAHMAaQB0AEQAYQB0AGUAAHFTAFQAXwBmAGMA
NQBiAGEAOQA3AGQAYQAwAGQAYwA0ADcAZABmAGEAYgAxAGEAOABjADgAZABjAGEANQA2ADIAOQBk
ADUALgBQAHIAbwBwAGUAcgB0AGkAZQBzAC4AUgBlAHMAbwB1AHIAYwBlAHMAAAAAACAJsoGMZZ9H
qzN5F7xKahcABCABAQgDIAABBSABARERBCABAQ4FIAEBEVkIBwQKAhI9EkEEIAASaQQgABJtBSAB
EnEcAyAAHAMgAA4DIAAKBCABARwEIAASeQUAAg4ODgogBgEIDg4OCBACCCAFAggODg4IBAABCAgE
AAEKCAQAAQ0IBAYRgI0IAAESgJERgJUFIAASgJkHIAIBDhKAmQi3elxWGTTgiQiJhF3NgIDMkQQA
AAAABAEAAAADBhJRAwYSVQMGEhACBggDBhEUBAAAElEEAAASVQUAAQESVQQAABIQAwAAAQQIABJR
BAgAElUECAASEAgBAAgAAAAAAB4BAAEAVAIWV3JhcE5vbkV4Y2VwdGlvblRocm93cwEIAQACAAAA
AAAoAQAjU1RfZmM1YmE5N2RhMGRjNDdkZmFiMWE4YzhkY2E1NjI5ZDUAAAUBAAAAABYBABFDb3B5
cmlnaHQgQCAgMjAxOQAASQEAGi5ORVRGcmFtZXdvcmssVmVyc2lvbj12NC41AQBUDhRGcmFtZXdv
cmtEaXNwbGF5TmFtZRIuTkVUIEZyYW1ld29yayA0LjUAtAAAAM7K774BAAAAkQAAAGxTeXN0ZW0u
UmVzb3VyY2VzLlJlc291cmNlUmVhZGVyLCBtc2NvcmxpYiwgVmVyc2lvbj00LjAuMC4wLCBDdWx0
dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkjU3lzdGVtLlJlc291
cmNlcy5SdW50aW1lUmVzb3VyY2VTZXQCAAAAAAAAAAAAAABQQURQQURQtAAAAHwxAAAAAAAAAAAA
AJYxAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAACIMQAAAAAAAAAAAAAAAF9Db3JEbGxNYWluAG1z
Y29yZWUuZGxsAAAAAAD/JQAgABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAEAEAAAABgAAIAAAAAAAAAAAAAAAAAAAAEAAQAAADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAA
AEgAAABYQAAAGgQAAAAAAAAAAAAAGgQ0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8A
AAAAAL0E7/4AAAEAAAABABd72hsAAAEAF3vaGz8AAAAAAAAABAAAAAIAAAAAAAAAAAAAAAAAAABE
AAAAAQBWAGEAcgBGAGkAbABlAEkAbgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8A
bgAAAAAAAACwBHoDAAABAFMAdAByAGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAAFYDAAABADAAMAAw
ADAAMAA0AGIAMAAAABoAAQABAEMAbwBtAG0AZQBuAHQAcwAAAAAAAAAiAAEAAQBDAG8AbQBwAGEA
bgB5AE4AYQBtAGUAAAAAAAAAAABwACQAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAAdABpAG8AbgAA
AAAAUwBUAF8AZgBjADUAYgBhADkANwBkAGEAMABkAGMANAA3AGQAZgBhAGIAMQBhADgAYwA4AGQA
YwBhADUANgAyADkAZAA1AAAAPgAPAAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAAAAAxAC4AMAAu
ADcAMQAzADAALgAzADEANQAxADEAAAAAAHAAKAABAEkAbgB0AGUAcgBuAGEAbABOAGEAbQBlAAAA
UwBUAF8AZgBjADUAYgBhADkANwBkAGEAMABkAGMANAA3AGQAZgBhAGIAMQBhADgAYwA4AGQAYwBh
ADUANgAyADkAZAA1AC4AZABsAGwAAABIABIAAQBMAGUAZwBhAGwAQwBvAHAAeQByAGkAZwBoAHQA
AABDAG8AcAB5AHIAaQBnAGgAdAAgAEAAIAAgADIAMAAxADkAAAAqAAEAAQBMAGUAZwBhAGwAVABy
AGEAZABlAG0AYQByAGsAcwAAAAAAAAAAAHgAKAABAE8AcgBpAGcAaQBuAGEAbABGAGkAbABlAG4A
YQBtAGUAAABTAFQAXwBmAGMANQBiAGEAOQA3AGQAYQAwAGQAYwA0ADcAZABmAGEAYgAxAGEAOABj
ADgAZABjAGEANQA2ADIAOQBkADUALgBkAGwAbAAAAGgAJAABAFAAcgBvAGQAdQBjAHQATgBhAG0A
ZQAAAAAAUwBUAF8AZgBjADUAYgBhADkANwBkAGEAMABkAGMANAA3AGQAZgBhAGIAMQBhADgAYwA4
AGQAYwBhADUANgAyADkAZAA1AAAAQgAPAAEAUAByAG8AZAB1AGMAdABWAGUAcgBzAGkAbwBuAAAA
MQAuADAALgA3ADEAMwAwAC4AMwAxADUAMQAxAAAAAABGAA8AAQBBAHMAcwBlAG0AYgBsAHkAIABW
AGUAcgBzAGkAbwBuAAAAMQAuADAALgA3ADEAMwAwAC4AMwAxADUAMQAxAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAADAAAAKgxAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==</BinaryItem>
            </ScriptProject>
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
      <DTS:PrecedenceConstraints>
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Foreach LockBox Loop Container.PrecedenceConstraints[Constraint]"
          DTS:CreationName=""
          DTS:DTSID="{ED663D17-E95C-4DC9-A252-CF2FBABECAED}"
          DTS:From="Package\Foreach LockBox Loop Container\Script  LB File Size into Variable"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint"
          DTS:To="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Foreach LockBox Loop Container.PrecedenceConstraints[Constraint 1]"
          DTS:CreationName=""
          DTS:DTSID="{8F016724-5E44-4F7E-89E8-78FCC4FE2D0D}"
          DTS:EvalOp="4"
          DTS:Expression="@[User::BankBatchID] !=0  ||  @[User::BatchTotal]==0"
          DTS:From="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info"
          DTS:ObjectName="Constraint 1"
          DTS:To="Package\Foreach LockBox Loop Container\File System Task to Error Folder"
          DTS:Value="1" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Foreach LockBox Loop Container.PrecedenceConstraints[Constraint 2]"
          DTS:CreationName=""
          DTS:DTSID="{FC4987F9-82AA-4EF0-8C3E-5DEA31898FEF}"
          DTS:From="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 2"
          DTS:To="Package\Foreach LockBox Loop Container\Execute SQL Task to add bank batch Hdr" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Foreach LockBox Loop Container.PrecedenceConstraints[Constraint 3]"
          DTS:CreationName=""
          DTS:DTSID="{64196AC0-BC9B-433C-A269-3FD1319F89A4}"
          DTS:EvalOp="3"
          DTS:Expression="@[User::BankBatchID] !=0"
          DTS:From="Package\Foreach LockBox Loop Container\Execute SQL Task to add bank batch Hdr"
          DTS:ObjectName="Constraint 3"
          DTS:To="Package\Foreach LockBox Loop Container\File System Task to Error Folder"
          DTS:Value="1" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Foreach LockBox Loop Container.PrecedenceConstraints[Constraint 4]"
          DTS:CreationName=""
          DTS:DTSID="{470D8A82-AA1C-4A4A-A0C6-BBC23F9407E4}"
          DTS:EvalOp="3"
          DTS:Expression="@[User::BankBatchID]!=0"
          DTS:From="Package\Foreach LockBox Loop Container\Execute SQL Task to add bank batch Hdr"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 4"
          DTS:To="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Foreach LockBox Loop Container.PrecedenceConstraints[Constraint 5]"
          DTS:CreationName=""
          DTS:DTSID="{89890E66-DD61-4801-A4BB-5BD8594D0EDC}"
          DTS:From="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 5"
          DTS:To="Package\Foreach LockBox Loop Container\File System Task Processed Folder" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Foreach LockBox Loop Container.PrecedenceConstraints[Constraint 6]"
          DTS:CreationName=""
          DTS:DTSID="{9B297EF9-459F-4A89-8DF7-1867DA13D195}"
          DTS:From="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load"
          DTS:ObjectName="Constraint 6"
          DTS:To="Package\Foreach LockBox Loop Container\File System Task to Error Folder"
          DTS:Value="1" />
      </DTS:PrecedenceConstraints>
      <DTS:ForEachVariableMappings>
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{B4CA4287-65DB-4D1E-BD02-63D1C93D07C6}"
          DTS:ObjectName="{B4CA4287-65DB-4D1E-BD02-63D1C93D07C6}"
          DTS:ValueIndex="0"
          DTS:VariableName="User::LBCurrentFile" />
      </DTS:ForEachVariableMappings>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:PrecedenceConstraints>
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint]"
      DTS:CreationName=""
      DTS:DTSID="{7F129380-31F5-4AC6-A2C2-5AB48763424D}"
      DTS:From="Package\File System Task For LB Processed Folder"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint"
      DTS:To="Package\File System Task For LB Error Folder" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 1]"
      DTS:CreationName=""
      DTS:DTSID="{744D1550-92D3-4EA6-A935-3429A203BCBD}"
      DTS:From="Package\File System Task For LB Error Folder"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 1"
      DTS:To="Package\Foreach LockBox Loop Container" />
  </DTS:PrecedenceConstraints>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="32" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph">
        <NodeLayout
          Size="250,42"
          Id="Package\File System Task For LB Error Folder"
          TopLeft="86,146" />
        <NodeLayout
          Size="274,42"
          Id="Package\File System Task For LB Processed Folder"
          TopLeft="81,58" />
        <NodeLayout
          Size="298,42"
          Id="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info"
          TopLeft="169,87" />
        <NodeLayout
          Size="228,42"
          Id="Package\Foreach LockBox Loop Container\Script  LB File Size into Variable"
          TopLeft="201,7" />
        <EdgeLayout
          Id="Package\Foreach LockBox Loop Container.PrecedenceConstraints[Constraint]"
          TopLeft="316.5,49">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,38"
              Start="0,0"
              End="0,30.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,30.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-17.9932421875,10.47314453125,35.986484375,9.5537109375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <NodeLayout
          Size="230,42"
          Id="Package\Foreach LockBox Loop Container\File System Task to Error Folder"
          TopLeft="278,486" />
        <EdgeLayout
          Id="Package\Foreach LockBox Loop Container.PrecedenceConstraints[Constraint 1]"
          TopLeft="366.333333333333,129">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="63.6666666666667,357"
              Start="0,0"
              End="63.6666666666667,349.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,174.151186849819" />
                  <mssgle:CubicBezierSegment
                    Point1="0,174.151186849819"
                    Point2="0,178.151186849819"
                    Point3="4,178.151186849819" />
                  <mssgle:LineSegment
                    End="59.6666666666667,178.151186849819" />
                  <mssgle:CubicBezierSegment
                    Point1="59.6666666666667,178.151186849819"
                    Point2="63.6666666666667,178.151186849819"
                    Point3="63.6666666666667,182.151186849819" />
                  <mssgle:LineSegment
                    End="63.6666666666667,349.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="7.72333333333334,183.151186849819,48.22,16"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <NodeLayout
          Size="177,61"
          Id="Package\Foreach LockBox Loop Container\Execute SQL Task to add bank batch Hdr"
          TopLeft="28.5,206" />
        <EdgeLayout
          Id="Package\Foreach LockBox Loop Container.PrecedenceConstraints[Constraint 2]"
          TopLeft="269.666666666667,129">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-152.666666666667,77"
              Start="0,0"
              End="-152.666666666667,69.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,27.0467289719626" />
                  <mssgle:CubicBezierSegment
                    Point1="0,27.0467289719626"
                    Point2="0,31.0467289719626"
                    Point3="-4,31.0467289719626" />
                  <mssgle:LineSegment
                    End="-148.666666666667,31.0467289719626" />
                  <mssgle:CubicBezierSegment
                    Point1="-148.666666666667,31.0467289719626"
                    Point2="-152.666666666667,31.0467289719626"
                    Point3="-152.666666666667,35.0467289719626" />
                  <mssgle:LineSegment
                    End="-152.666666666667,69.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-94.3265755208333,36.0467289719626,35.986484375,9.5537109375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Foreach LockBox Loop Container.PrecedenceConstraints[Constraint 3]"
          TopLeft="145.166666666667,267">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="210.833333333333,219"
              Start="0,0"
              End="210.833333333333,211.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,105.779525093922" />
                  <mssgle:CubicBezierSegment
                    Point1="0,105.779525093922"
                    Point2="0,109.779525093922"
                    Point3="4,109.779525093922" />
                  <mssgle:LineSegment
                    End="206.833333333333,109.779525093922" />
                  <mssgle:CubicBezierSegment
                    Point1="206.833333333333,109.779525093922"
                    Point2="210.833333333333,109.779525093922"
                    Point3="210.833333333333,113.779525093922" />
                  <mssgle:LineSegment
                    End="210.833333333333,211.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="81.3066666666667,114.779525093922,48.22,16"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <NodeLayout
          Size="198,42"
          Id="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load"
          TopLeft="5.5,387" />
        <EdgeLayout
          Id="Package\Foreach LockBox Loop Container.PrecedenceConstraints[Constraint 4]"
          TopLeft="88.8333333333333,267">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="15.6666666666667,120"
              Start="0,0"
              End="15.6666666666667,112.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,44.6450167973124" />
                  <mssgle:CubicBezierSegment
                    Point1="0,44.6450167973124"
                    Point2="0,48.6450167973124"
                    Point3="4,48.6450167973124" />
                  <mssgle:LineSegment
                    End="11.6666666666667,48.6450167973124" />
                  <mssgle:CubicBezierSegment
                    Point1="11.6666666666667,48.6450167973124"
                    Point2="15.6666666666667,48.6450167973124"
                    Point3="15.6666666666667,52.6450167973124" />
                  <mssgle:LineSegment
                    End="15.6666666666667,112.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-18.8478971354167,53.6450167973124,53.3624609375,16"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <NodeLayout
          Size="241,42"
          Id="Package\Foreach LockBox Loop Container\File System Task Processed Folder"
          TopLeft="1,493" />
        <EdgeLayout
          Id="Package\Foreach LockBox Loop Container.PrecedenceConstraints[Constraint 5]"
          TopLeft="104.5,429">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="17,64"
              Start="0,0"
              End="17,56.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,28" />
                  <mssgle:CubicBezierSegment
                    Point1="0,28"
                    Point2="0,32"
                    Point3="4,32" />
                  <mssgle:LineSegment
                    End="13,32" />
                  <mssgle:CubicBezierSegment
                    Point1="13,32"
                    Point2="17,32"
                    Point3="17,36" />
                  <mssgle:LineSegment
                    End="17,56.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-9.4932421875,37,35.986484375,9.5537109375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Foreach LockBox Loop Container.PrecedenceConstraints[Constraint 6]"
          TopLeft="136.166666666667,429">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="201.333333333333,57"
              Start="0,0"
              End="201.333333333333,49.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,28.3731403493759" />
                  <mssgle:CubicBezierSegment
                    Point1="0,28.3731403493759"
                    Point2="0,32.3731403493759"
                    Point3="4,32.3731403493759" />
                  <mssgle:LineSegment
                    End="197.333333333333,32.3731403493759" />
                  <mssgle:CubicBezierSegment
                    Point1="197.333333333333,32.3731403493759"
                    Point2="201.333333333333,32.3731403493759"
                    Point3="201.333333333333,36.3731403493759" />
                  <mssgle:LineSegment
                    End="201.333333333333,49.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="85.4253190104167,37.3731403493759,30.4826953125,9.7490234375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="513,600"
          Size="513,643"
          Id="Package\Foreach LockBox Loop Container"
          TopLeft="87,232" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint]"
          TopLeft="214.5,100">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,46"
              Start="0,0"
              End="0,38.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,38.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-17.9932421875,14.47314453125,35.986484375,9.5537109375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 1]"
          TopLeft="211,188">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="132.5,44"
              Start="0,0"
              End="132.5,36.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,18" />
                  <mssgle:CubicBezierSegment
                    Point1="0,18"
                    Point2="0,22"
                    Point3="4,22" />
                  <mssgle:LineSegment
                    End="128.5,22" />
                  <mssgle:CubicBezierSegment
                    Point1="128.5,22"
                    Point2="132.5,22"
                    Point3="132.5,26" />
                  <mssgle:LineSegment
                    End="132.5,36.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="48.2567578125,27,35.986484375,9.5537109375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </Package>
  <TaskHost
    design-time-name="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info">
    <LayoutInfo>
      <GraphLayout
        Capacity="32" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph">
        <NodeLayout
          Size="158,42"
          Id="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Flat File LockBox"
          TopLeft="103,37" />
        <NodeLayout
          Size="147,42"
          Id="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Character Map"
          TopLeft="102,130" />
        <EdgeLayout
          Id="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info.Paths[Flat File Source Output]"
          TopLeft="178.75,79">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,51"
              Start="0,0"
              End="0,43.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,43.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <NodeLayout
          Size="155,42"
          Id="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Conditional Split"
          TopLeft="89,213" />
        <EdgeLayout
          Id="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info.Paths[Character Map Output]"
          TopLeft="175.5,172">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-9,41"
              Start="0,0"
              End="-9,33.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,16.5" />
                  <mssgle:CubicBezierSegment
                    Point1="0,16.5"
                    Point2="0,20.5"
                    Point3="-4,20.5" />
                  <mssgle:LineSegment
                    End="-5,20.5" />
                  <mssgle:CubicBezierSegment
                    Point1="-5,20.5"
                    Point2="-9,20.5"
                    Point3="-9,24.5" />
                  <mssgle:LineSegment
                    End="-9,33.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <NodeLayout
          Size="221,42"
          Id="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Derived Columns from Header"
          TopLeft="58,303" />
        <EdgeLayout
          Id="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info.Paths[Header]"
          TopLeft="167.5,255">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,48"
              Start="0,0"
              End="0,40.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,40.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-16.43369140625,15.37548828125,32.8673828125,9.7490234375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <NodeLayout
          Size="265,42"
          Id="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Script Component to get the Error Desc"
          TopLeft="40,383" />
        <EdgeLayout
          Id="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info.Paths[Derived Column Error Output]"
          TopLeft="170.5,345">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,38"
              Start="0,0"
              End="0,30.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,30.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-64.96138671875,9.4453125,129.9227734375,11.609375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <NodeLayout
          Size="237,42"
          Id="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Derived Column System Variables"
          TopLeft="44,449" />
        <EdgeLayout
          Id="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info.Paths[Output 0]"
          TopLeft="172.5,425">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-10,24"
              Start="0,0"
              End="-10,16.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,8" />
                  <mssgle:CubicBezierSegment
                    Point1="0,8"
                    Point2="0,12"
                    Point3="-4,12" />
                  <mssgle:LineSegment
                    End="-6,12" />
                  <mssgle:CubicBezierSegment
                    Point1="-6,12"
                    Point2="-10,12"
                    Point3="-10,16" />
                  <mssgle:LineSegment
                    End="-10,16.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <NodeLayout
          Size="218,42"
          Id="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\OLE DB Destination Error Log"
          TopLeft="46,527" />
        <EdgeLayout
          Id="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info.Paths[Derived Column Output]"
          TopLeft="158.75,491">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,36"
              Start="0,0"
              End="0,28.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,28.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <NodeLayout
          Size="154,42"
          Id="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Lookup batchID"
          TopLeft="340,375" />
        <EdgeLayout
          Id="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info.Paths[Derived Column Output1]"
          TopLeft="204,345">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="213,30"
              Start="0,0"
              End="213,22.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,8.12938005390836" />
                  <mssgle:CubicBezierSegment
                    Point1="0,8.12938005390836"
                    Point2="0,12.1293800539084"
                    Point3="4,12.1293800539084" />
                  <mssgle:LineSegment
                    End="209,12.1293800539084" />
                  <mssgle:CubicBezierSegment
                    Point1="209,12.1293800539084"
                    Point2="213,12.1293800539084"
                    Point3="213,16.1293800539084" />
                  <mssgle:LineSegment
                    End="213,22.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <NodeLayout
          Size="250,42"
          Id="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Script Component to Store Variables"
          TopLeft="330,458" />
        <EdgeLayout
          Id="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info.Paths[Lookup Match Output]"
          TopLeft="417,417">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="38,41"
              Start="0,0"
              End="38,33.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,16.5" />
                  <mssgle:CubicBezierSegment
                    Point1="0,16.5"
                    Point2="0,20.5"
                    Point3="4,20.5" />
                  <mssgle:LineSegment
                    End="34,20.5" />
                  <mssgle:CubicBezierSegment
                    Point1="34,20.5"
                    Point2="38,20.5"
                    Point3="38,24.5" />
                  <mssgle:LineSegment
                    End="38,33.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-29.19138671875,25.5,96.3827734375,11.609375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <NodeLayout
          Size="174,42"
          Id="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Record Check Count"
          TopLeft="324,250" />
        <EdgeLayout
          Id="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info.Paths[Check]"
          TopLeft="244,234">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="80,37"
              Start="0,0"
              End="72.5,37">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="36,0" />
                  <mssgle:CubicBezierSegment
                    Point1="36,0"
                    Point2="40,0"
                    Point3="40,4" />
                  <mssgle:LineSegment
                    End="40,33" />
                  <mssgle:CubicBezierSegment
                    Point1="40,33"
                    Point2="40,37"
                    Point3="44,37" />
                  <mssgle:LineSegment
                    End="72.5,37" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="25.838359375,-15.7294921875,28.32328125,9.7294921875"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <AnnotationLayout
          Text="DataFlow Validation LockBox&#xD;&#xA;Purpose: will parse lockbox file &#xD;&#xA;and validate header attributes&#xD;&#xA; Set variables used"
          ParentId="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info"
          FontInfo="{assembly:Null}"
          Size="194,88"
          Id="2c17bf0c-1446-4154-8122-f8de9dfab5c2"
          TopLeft="741,483" />
      </GraphLayout>
    </LayoutInfo>
  </TaskHost>
  <TaskHost
    design-time-name="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load">
    <LayoutInfo>
      <GraphLayout
        Capacity="32" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph">
        <NodeLayout
          Size="196,42"
          Id="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Flat File  LockBox Source"
          TopLeft="83,39" />
        <NodeLayout
          Size="147,42"
          Id="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Character Map"
          TopLeft="100,109" />
        <EdgeLayout
          Id="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load.Paths[Flat File Source Output]"
          TopLeft="177.25,81">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,28"
              Start="0,0"
              End="0,20.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,20.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <NodeLayout
          Size="298,42"
          Id="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Conditional Split for Header Check and Invoice"
          TopLeft="165,177" />
        <EdgeLayout
          Id="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load.Paths[Character Map Output]"
          TopLeft="173.5,151">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="140.5,26"
              Start="0,0"
              End="140.5,18.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,9" />
                  <mssgle:CubicBezierSegment
                    Point1="0,9"
                    Point2="0,13"
                    Point3="4,13" />
                  <mssgle:LineSegment
                    End="136.5,13" />
                  <mssgle:CubicBezierSegment
                    Point1="136.5,13"
                    Point2="140.5,13"
                    Point3="140.5,17" />
                  <mssgle:LineSegment
                    End="140.5,18.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <NodeLayout
          Size="185,42"
          Id="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column Check"
          TopLeft="41,267" />
        <EdgeLayout
          Id="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load.Paths[Check]"
          TopLeft="241.5,219">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-108,48"
              Start="0,0"
              End="-108,40.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,12.2838137472284" />
                  <mssgle:CubicBezierSegment
                    Point1="0,12.2838137472284"
                    Point2="0,16.2838137472284"
                    Point3="-4,16.2838137472284" />
                  <mssgle:LineSegment
                    End="-104,16.2838137472284" />
                  <mssgle:CubicBezierSegment
                    Point1="-104,16.2838137472284"
                    Point2="-108,16.2838137472284"
                    Point3="-108,20.2838137472284" />
                  <mssgle:LineSegment
                    End="-108,40.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-68.161640625,21.2838137472284,28.32328125,9.7294921875"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <NodeLayout
          Size="191,42"
          Id="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column Invoice"
          TopLeft="244,268" />
        <EdgeLayout
          Id="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load.Paths[Invoice]"
          TopLeft="314,219">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="25.5,49"
              Start="0,0"
              End="25.5,41.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,20.5" />
                  <mssgle:CubicBezierSegment
                    Point1="0,20.5"
                    Point2="0,24.5"
                    Point3="4,24.5" />
                  <mssgle:LineSegment
                    End="21.5,24.5" />
                  <mssgle:CubicBezierSegment
                    Point1="21.5,24.5"
                    Point2="25.5,24.5"
                    Point3="25.5,28.5" />
                  <mssgle:LineSegment
                    End="25.5,41.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-3.83294921875,29.5,33.1658984375,9.470703125"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <NodeLayout
          Size="130,42"
          Id="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Sort Check"
          TopLeft="82,335" />
        <EdgeLayout
          Id="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load.Paths[Derived Column Output]"
          TopLeft="133.5,309">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="13.5,26"
              Start="0,0"
              End="13.5,18.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,9" />
                  <mssgle:CubicBezierSegment
                    Point1="0,9"
                    Point2="0,13"
                    Point3="4,13" />
                  <mssgle:LineSegment
                    End="9.5,13" />
                  <mssgle:CubicBezierSegment
                    Point1="9.5,13"
                    Point2="13.5,13"
                    Point3="13.5,17" />
                  <mssgle:LineSegment
                    End="13.5,18.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <NodeLayout
          Size="135,42"
          Id="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Sort Invoice"
          TopLeft="266,333" />
        <EdgeLayout
          Id="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load.Paths[Derived Column Output1]"
          TopLeft="336.5,310">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,23"
              Start="0,0"
              End="0,15.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,15.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <NodeLayout
          Size="171,42"
          Id="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Merge Join Checks and Invoices"
          TopLeft="145,424" />
        <EdgeLayout
          Id="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load.Paths[Sort Output]"
          TopLeft="147,377">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="56.3333333333333,47"
              Start="0,0"
              End="56.3333333333333,39.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,23.9385863267671" />
                  <mssgle:CubicBezierSegment
                    Point1="0,23.9385863267671"
                    Point2="0,27.9385863267671"
                    Point3="4,27.9385863267671" />
                  <mssgle:LineSegment
                    End="52.3333333333333,27.9385863267671" />
                  <mssgle:CubicBezierSegment
                    Point1="52.3333333333333,27.9385863267671"
                    Point2="56.3333333333333,27.9385863267671"
                    Point3="56.3333333333333,31.9385863267671" />
                  <mssgle:LineSegment
                    End="56.3333333333333,39.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load.Paths[Sort Output1]"
          TopLeft="333.5,375">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-75.8333333333334,49"
              Start="0,0"
              End="-75.8333333333334,41.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,25.1274623406721" />
                  <mssgle:CubicBezierSegment
                    Point1="0,25.1274623406721"
                    Point2="0,29.1274623406721"
                    Point3="-4,29.1274623406721" />
                  <mssgle:LineSegment
                    End="-71.8333333333334,29.1274623406721" />
                  <mssgle:CubicBezierSegment
                    Point1="-71.8333333333334,29.1274623406721"
                    Point2="-75.8333333333334,29.1274623406721"
                    Point3="-75.8333333333334,33.1274623406721" />
                  <mssgle:LineSegment
                    End="-75.8333333333334,41.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <NodeLayout
          Size="251,42"
          Id="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column to add BankBatchID"
          TopLeft="109,501" />
        <EdgeLayout
          Id="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load.Paths[Merge Join Output]"
          TopLeft="232.5,466">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,35"
              Start="0,0"
              End="0,27.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,27.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <NodeLayout
          Size="206,42"
          Id="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\OLE DB Destination Details"
          TopLeft="144,574" />
        <EdgeLayout
          Id="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load.Paths[Derived Column Output2]"
          TopLeft="234.5,543">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="12.5,31"
              Start="0,0"
              End="12.5,23.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,11.5" />
                  <mssgle:CubicBezierSegment
                    Point1="0,11.5"
                    Point2="0,15.5"
                    Point3="4,15.5" />
                  <mssgle:LineSegment
                    End="8.5,15.5" />
                  <mssgle:CubicBezierSegment
                    Point1="8.5,15.5"
                    Point2="12.5,15.5"
                    Point3="12.5,19.5" />
                  <mssgle:LineSegment
                    End="12.5,23.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <AnnotationLayout
          Text="Data Flow LockBox Detail Data Load&#xD;&#xA;Purpose: To import lockbox details data&#xD;&#xA;into"
          ParentId="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load"
          FontInfo="{assembly:Null}"
          Size="238,72"
          Id="f5826b93-4a89-4b41-946c-e9f00465f108"
          TopLeft="635,566" />
        <NodeLayout
          Size="191,42"
          Id="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Derived Column Header"
          TopLeft="469,267" />
        <EdgeLayout
          Id="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load.Paths[Header]"
          TopLeft="386.5,219">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="178,48"
              Start="0,0"
              End="178,40.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,12.2838137472284" />
                  <mssgle:CubicBezierSegment
                    Point1="0,12.2838137472284"
                    Point2="0,16.2838137472284"
                    Point3="4,16.2838137472284" />
                  <mssgle:LineSegment
                    End="174,16.2838137472284" />
                  <mssgle:CubicBezierSegment
                    Point1="174,16.2838137472284"
                    Point2="178,16.2838137472284"
                    Point3="178,20.2838137472284" />
                  <mssgle:LineSegment
                    End="178,40.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="72.56630859375,21.2838137472284,32.8673828125,9.7490234375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <NodeLayout
          Size="207,42"
          Id="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\Import Column to store file"
          TopLeft="459,356" />
        <EdgeLayout
          Id="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load.Paths[Derived Column Output3]"
          TopLeft="563.5,309">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,47"
              Start="0,0"
              End="0,39.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,39.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <NodeLayout
          Size="199,42"
          Id="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\OLE DB Store Files steam"
          TopLeft="464,473" />
        <EdgeLayout
          Id="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load.Paths[Import Column Output]"
          TopLeft="563,398">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,75"
              Start="0,0"
              End="0,67.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,67.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </TaskHost>
  <PipelineComponentMetadata
    design-time-name="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\OLE DB Destination Error Log">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q2:string">Table</Value>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <PipelineComponentMetadata
    design-time-name="Package\Foreach LockBox Loop Container\Data Flow LockBox Validation and Header Info\Lookup batchID">
    <Properties>
      <Property>
        <Name>OverwriteParamsSQLProp</Name>
        <Value
          type="q2:boolean">false</Value>
      </Property>
      <Property>
        <Name>UsedTableName</Name>
        <Value
          type="q3:string">[dbo].[BankBatch]</Value>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q4:int">0</Value>
      </Property>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <PipelineComponentMetadata
    design-time-name="Package\Foreach LockBox Loop Container\Data Flow LockBox Detail Data Load\OLE DB Destination Details">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q2:string">Table</Value>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>